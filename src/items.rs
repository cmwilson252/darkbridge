#![allow(unused_must_use)]
#![allow(dead_code)]


use std::convert::TryFrom;
use regex::Regex;

#[derive(Debug)]
pub enum ItemParseError {
    MissingParameter,
    UnknownItem(String),
    UnknownSpecial(String),
    UnknownAttribute(String),
    UnknownTech(String),
    UnknownPhotonBlast(String),
    ParseIntError(std::num::ParseIntError),
    HexError(hex::FromHexError),
}

impl From<std::num::ParseIntError> for ItemParseError {
    fn from(err: std::num::ParseIntError) -> ItemParseError {
        ItemParseError::ParseIntError(err)
    }
}

impl From<hex::FromHexError> for ItemParseError {
    fn from(err: hex::FromHexError) -> ItemParseError {
        ItemParseError::HexError(err)
    }
}

pub trait ItemData: std::fmt::Debug {
    fn row1(&self) -> u32;
    fn row2(&self) -> u32;
    fn row3(&self) -> u32;
    fn row4(&self) -> u32;
}

#[derive(Debug)]
pub enum Attribute {
    Native,
    ABeast,
    Machine,
    Dark,
    Hit
}

#[derive(Debug)]
pub struct WeaponAttribute {
    attr: Attribute,
    value: u8,
}

impl TryFrom<&str> for WeaponAttribute {
    type Error = ItemParseError;
    fn try_from(attr: &str) -> Result<WeaponAttribute, ItemParseError> {
        let re = Regex::new(r"(?P<value>\d{1,3})(?P<attr>[namdh])").unwrap();
        if let Some(cap) = re.captures(attr) {
            let strvalue = &cap["value"];
            let value = if let Ok(v) = strvalue.parse() {
                v
            }
            else {
                0
            };

            let attr = match &cap["attr"] {
                "n" => Attribute::Native,
                "a" => Attribute::ABeast,
                "m" => Attribute::Machine,
                "d" => Attribute::Dark,
                "h" => Attribute::Hit,
                _ => unreachable!()
            };
            Ok(WeaponAttribute {
                attr: attr,
                value: value,
            })
        }
        else {
            Err(ItemParseError::UnknownAttribute(String::from(attr)))
        }
    }
}

impl WeaponAttribute {
    fn as_value(&self) -> u16 {
        let attr = match self.attr {
            Attribute::Native => 1,
            Attribute::ABeast => 2,
            Attribute::Machine => 3,
            Attribute::Dark => 4,
            Attribute::Hit => 5,
        };

        ((attr as u16) << 8) | self.value as u16
    }
}

#[derive(Debug)]
pub enum WeaponSpecial {
    Draw,
    Drain,
    Fill,
    Gush,
    Heart,
    Mind,
    Soul,
    Geist,
    Masters,
    Lords,
    Kings,
    Charge,
    Spirit,
    Berserk,
    Ice,
    Frost,
    Freeze,
    Blizzard,
    Bind,
    Hold,
    Seize,
    Arrest,
    Heat,
    Fire,
    Flame,
    Burning,
    Shock,
    Thunder,
    Storm,
    Tempest,
    Dim,
    Shadow,
    Dark,
    Hell,
    Panic,
    Riot,
    Havoc,
    Chaos,
    Devils,
    Demons,
}

impl TryFrom<&str> for WeaponSpecial {
    type Error = ItemParseError;
    fn try_from(special: &str) -> Result<WeaponSpecial, ItemParseError> {
        match special {
            "draw" => Ok(WeaponSpecial::Draw),
            "drain" => Ok(WeaponSpecial::Drain),
            "fill" => Ok(WeaponSpecial::Fill),
            "gush" => Ok(WeaponSpecial::Gush),
            "heart" => Ok(WeaponSpecial::Heart),
            "mind" => Ok(WeaponSpecial::Mind),
            "soul" => Ok(WeaponSpecial::Soul),
            "geist" => Ok(WeaponSpecial::Geist),
            "masters" => Ok(WeaponSpecial::Masters),
            "lords" => Ok(WeaponSpecial::Lords),
            "kings" => Ok(WeaponSpecial::Kings),
            "charge" => Ok(WeaponSpecial::Charge),
            "spirit" => Ok(WeaponSpecial::Spirit),
            "berserk" => Ok(WeaponSpecial::Berserk),
            "ice" => Ok(WeaponSpecial::Ice),
            "frost" => Ok(WeaponSpecial::Frost),
            "freeze" => Ok(WeaponSpecial::Freeze),
            "blizzard" => Ok(WeaponSpecial::Blizzard),
            "bind" => Ok(WeaponSpecial::Bind),
            "hold" => Ok(WeaponSpecial::Hold),
            "seize" => Ok(WeaponSpecial::Seize),
            "arrest" => Ok(WeaponSpecial::Arrest),
            "heat" => Ok(WeaponSpecial::Heat),
            "fire" => Ok(WeaponSpecial::Fire),
            "flame" => Ok(WeaponSpecial::Flame),
            "burning" => Ok(WeaponSpecial::Burning),
            "shock" => Ok(WeaponSpecial::Shock),
            "thunder" => Ok(WeaponSpecial::Thunder),
            "storm" => Ok(WeaponSpecial::Storm),
            "tempest" => Ok(WeaponSpecial::Tempest),
            "dim" => Ok(WeaponSpecial::Dim),
            "shadow" => Ok(WeaponSpecial::Shadow),
            "dark" => Ok(WeaponSpecial::Dark),
            "hell" => Ok(WeaponSpecial::Hell),
            "panic" => Ok(WeaponSpecial::Panic),
            "riot" => Ok(WeaponSpecial::Riot),
            "havoc" => Ok(WeaponSpecial::Havoc),
            "chaos" => Ok(WeaponSpecial::Chaos),
            "devils" => Ok(WeaponSpecial::Devils),
            "demons" => Ok(WeaponSpecial::Demons),
            _ => Err(ItemParseError::UnknownSpecial(String::from(special)))
        }
    }
}

impl WeaponSpecial {
    fn as_value(&self) -> u8 {
        match self {
            WeaponSpecial::Draw => 0x01,
            WeaponSpecial::Drain => 0x02,
            WeaponSpecial::Fill => 0x03,
            WeaponSpecial::Gush => 0x04,
            WeaponSpecial::Heart => 0x05,
            WeaponSpecial::Mind => 0x06,
            WeaponSpecial::Soul => 0x07,
            WeaponSpecial::Geist => 0x08,
            WeaponSpecial::Masters => 0x09,
            WeaponSpecial::Lords => 0x0A,
            WeaponSpecial::Kings => 0x0b,
            WeaponSpecial::Charge => 0x0C,
            WeaponSpecial::Spirit => 0x0D,
            WeaponSpecial::Berserk => 0x0E,
            WeaponSpecial::Ice => 0x0F,
            WeaponSpecial::Frost => 0x10,
            WeaponSpecial::Freeze => 0x11,
            WeaponSpecial::Blizzard => 0x12,
            WeaponSpecial::Bind => 0x13,
            WeaponSpecial::Hold => 0x14,
            WeaponSpecial::Seize => 0x15,
            WeaponSpecial::Arrest => 0x16,
            WeaponSpecial::Heat => 0x17,
            WeaponSpecial::Fire => 0x18,
            WeaponSpecial::Flame => 0x19,
            WeaponSpecial::Burning => 0x1A,
            WeaponSpecial::Shock => 0x1B,
            WeaponSpecial::Thunder => 0x1C,
            WeaponSpecial::Storm => 0x1D,
            WeaponSpecial::Tempest => 0x1E,
            WeaponSpecial::Dim => 0x1F,
            WeaponSpecial::Shadow => 0x20,
            WeaponSpecial::Dark => 0x21,
            WeaponSpecial::Hell => 0x22,
            WeaponSpecial::Panic => 0x23,
            WeaponSpecial::Riot => 0x24,
            WeaponSpecial::Havoc => 0x25,
            WeaponSpecial::Chaos => 0x26,
            WeaponSpecial::Devils => 0x27,
            WeaponSpecial::Demons => 0x28,
        }
    }
}

#[derive(Debug)]
pub enum WeaponType {
    Saber,
Saber,
Brand,
Buster,
Pallasch,
Gladius,
DbsSaber,
Kaladbolg,
Durandal,
Galatine,
Sword,
Gigush,
Breaker,
Claymore,
Calibur,
FlowensSword,
LastSurvivor,
DragonSlayer,
Dagger,
Knife,
Blade,
Edge,
Ripper,
BladeDance,
BloodyArt,
CrossScar,
ZeroDivide,
TwoKamui,
Partisan,
Halbert,
Glaive,
Berdys,
Gungnir,
Brionac,
Vjaya,
GaeBolg,
AsteronBelt,
Slicer,
Spinner,
Cutter,
Sawcer,
Diska,
SlicerOfAssassin,
DiskaOfLiberator,
DiskaOfBraveman,
Izmaela,
Handgun,
Autogun,
Lockgun,
Railgun,
Raygun,
Varista,
CustomRayveroo,
Bravace,
TensionBlaster,
Rifle,
Sniper,
Blaster,
Beam,
Laser,
Visk235w,
Walsmk2,
Justy23st,
Rianov303snr,
Rianov303snr1,
Rianov303snr2,
Rianov303snr3,
Rianov303snr4,
Rianov303snr5,
Mechgun,
Assault,
Repeater,
Gatling,
Vulcan,
MA60Vise,
HS25Justice,
LK14Combat,
Shot,
Spread,
Cannon,
Launcher,
Arms,
CrushBullet,
MeteorSmash,
FinalImpact,
Cane,
Stick,
Mace,
Club,
ClubOfLaconium,
MaceOfAdaman,
ClubOfZumiuran,
Lollipop,
Rod,
Pole,
Pillar,
Striker,
BattleVerge,
BraveHammer,
AliveAqhu,
Valkyrie,
Wand,
Staff,
Baton,
Scepter,
FireScepteragni,
IceStaffdagon,
StormWandindra,
EarthWandBrownie,
PhotonClaw,
SilenceClaw,
NeisClaw,
PhoenixClaw,
DoubleSaber,
StagCutlery,
TwinBrand,
BraveKnuckle,
AngryFist,
GodHand,
SonicKnuckle,
Login,
Orotiagito,
Agito1975,
Agito1983,
Agito2001,
Agito1991,
Agito1977,
Agito1980,
Raikiri,
SoulEater,
SoulBanish,
SpreadNeedle,
HolyRay,
InfernoBazooka,
RamblingMay,
LK38Combat,
FlameVisit,
BurningVisit,
AkikosFryingPan,
SorcerersCane,
SBeatsBlade,
PArmssBlade,
DelsabersBuster,
BringersRifle,
EggBlaster,
PsychoWand,
HeavenPunisher,
LavisCannon,
VictorAxe,
LaconiumAxe,
ChainSawd,
Caduceus,
MercuriusRod,
StingTip,
MagicalPiece,
TechnicalCrozier,
SuppressedGun,
AncientSaber,
HarisenBattleFan,
Yamigarasu,
AkikosWok,
ToyHammer,
Elysion,
RedSaber,
MeteorCudgel,
MonkeyKingBar,
BlackKingBar,
DoubleCannon,
Girasole,
HugeBattleFan,
TsumikiriJSword,
SealedJSword,
RedSword,
CrazyTune,
TwinChakram,
WokOfAkikosShop,
LavisBlade,
RedDagger,
MadamsParasol,
MadamsUmbrella,
ImperialPick,
Berdysh,
RedPartisan,
FlightCutter,
FlightFan,
RedSlicer,
Handgunguld,
MasterRaven,
Handgunmilla,
LastSwan,
RedHandgun,
FrozenShooter,
SnowQueen,
AntiAndroidRifle,
RocketPunch,
SambaMaracas,
TwinPsychogun,
DrillLauncher,
GuldMilla,
DualBird,
RedMechgun,
BelraCannon,
PanzerFaust,
IronFaust,
SummitMoon,
Windmill,
EvilCurst,
FlowerCane,
HildebearsCane,
HildebluesCane,
RabbitWand,
PlantainLeaf,
Fatsia,
DemonicFork,
StrikerOfChao,
Broom,
ProphetsOfMotav,
TheSighOfAGod,
TwinkleStar,
PlantainFan,
TwinBlaze,
MarinasBag,
DragonsClaw,
PanthersClaw,
SRedsBlade,
PlantainHugeFan,
ChameleonScythe,
Yasminkov3000r,
AnoRifle,
BaranzLauncher,
BranchOfPakupaku,
HeartOfPoumn,
Yasminkov2000h,
Yasminkov7000v,
Yasminkov9000m,
MaserBeam,
PowerMaser,
GameMagazne,
Login,
FlowerBouquet,
Musashi,
Yamato,
Asuka,
SangeYasha,
Sange,
Yasha,
Kamui,
PhotonLauncher,
GuiltyLight,
RedScorpio,
PhononMaser,
Talis,
Mahu,
Hitogata,
DancingHitogata,
Kunai,
Nug2000bazooka,
SBerillsHands0,
SBerillsHands1,
FlowensSword3060,
FlowensSword3064,
FlowensSword3067,
FlowensSword3073,
FlowensSword3077,
FlowensSword3082,
FlowensSword3083,
FlowensSword3084,
FlowensSword3079,
DbsSaber3062,
DbsSaber3067,
DbsSaber3069Chris,
DbsSaber3064,
DbsSaber3069Torato,
DbsSaber3073,
DbsSaber3070,
DbsSaber3075,
DbsSaber3077,
GiGueBazooka,
Guardianna,
ViridiaCard,
GreenillCard,
SkylyCard,
BluefullCard,
PurplenumCard,
PinkalCard,
RedriaCard,
OranCard,
YellowbozeCard,
WhitillCard,
MorningGlory,
PartisanofLightning,
GalWind,
Zanba,
RikasClaw,
AngelHarp,
DemolitionComet,
NeisClaw,
RainbowBaton,
DarkFlow,
DarkMeteor,
DarkBridge,
GAssassinsSabers,
RappysFan,
BoomasClaw,
GoboomasClaw,
GigoboomasClaw,
RubyBullet,
AmoreRose,
SlicerOfFanatic,
LameDArgent,
Excalibur,
RageDeFeu,
RageDeFeu,
RageDeFeu,
RageDeFeu,
DaisyChain,
OphelieSeize,
MilleMarteaux,
LeCogneur,
CommanderBlade,
Vivienne,
Kusanagi,
SacredDuster,
Guren,
Shouren,
Jizai,
Flamberge,
Yunchang,
SnakeSpire,
FlapjackFlapper,
Getsugasan,
Maguwa,
HeavenStriker,
CannonRouge,
MeteorRouge,
Solferino,
Clio,
SirenGlassHammer,
GlideDivine,
Shichishito,
Murasame,
DaylightScar,
Decalog,
5thAnnivBlade,
TyrellsParasol,
AkikosCleaver,
Tanegashima,
TreeClippers,
NiceShot,
Unknown3,
Unknown4,
AnoBazooka,
Synthesizer,
BambooSpear,
KaneiTsuho,
Jitte,
ButterflyNet,
Syringe,
Battledore,
Racket,
Hammer,
GreatBouquet,
TypesaSaber,
TypeslSaber,
TypeslSlicer,
TypeslClaw,
TypeslKatana,
TypejsSaber,
TypejsSlicer,
TypejsJSword,
TypeswSword,
TypeswSlicer,
TypeswJSword,
TyperoSword,
TyperoHalbert,
TyperoRod,
TypeblBlade,
TypeknBlade,
TypeknClaw,
TypehaHalbert,
TypehaRod,
TypedsDSaber,
TypedsRod,
Typeds,
TypeclClaw,
TypessSw,
TypeguHand,
TypeguMechgun,
TyperiRifle,
TypemeMechgun,
TypeshShot,
TypewaWand,
????,






}

impl TryFrom<&str> for WeaponType {
    type Error = ItemParseError;
    fn try_from(value: &str) -> Result<WeaponType, Self::Error> {
        match value {
            "saber" => Ok(WeaponType::Saber),
"saber" => Ok(WeaponType::Saber),
"brand" => Ok(WeaponType::Brand),
"buster" => Ok(WeaponType::Buster),
"pallasch" => Ok(WeaponType::Pallasch),
"gladius" => Ok(WeaponType::Gladius),
"dbssaber" => Ok(WeaponType::DbsSaber),
"kaladbolg" => Ok(WeaponType::Kaladbolg),
"durandal" => Ok(WeaponType::Durandal),
"galatine" => Ok(WeaponType::Galatine),
"sword" => Ok(WeaponType::Sword),
"gigush" => Ok(WeaponType::Gigush),
"breaker" => Ok(WeaponType::Breaker),
"claymore" => Ok(WeaponType::Claymore),
"calibur" => Ok(WeaponType::Calibur),
"flowenssword" => Ok(WeaponType::FlowensSword),
"lastsurvivor" => Ok(WeaponType::LastSurvivor),
"dragonslayer" => Ok(WeaponType::DragonSlayer),
"dagger" => Ok(WeaponType::Dagger),
"knife" => Ok(WeaponType::Knife),
"blade" => Ok(WeaponType::Blade),
"edge" => Ok(WeaponType::Edge),
"ripper" => Ok(WeaponType::Ripper),
"bladedance" => Ok(WeaponType::BladeDance),
"bloodyart" => Ok(WeaponType::BloodyArt),
"crossscar" => Ok(WeaponType::CrossScar),
"zerodivide" => Ok(WeaponType::ZeroDivide),
"twokamui" => Ok(WeaponType::TwoKamui),
"partisan" => Ok(WeaponType::Partisan),
"halbert" => Ok(WeaponType::Halbert),
"glaive" => Ok(WeaponType::Glaive),
"berdys" => Ok(WeaponType::Berdys),
"gungnir" => Ok(WeaponType::Gungnir),
"brionac" => Ok(WeaponType::Brionac),
"vjaya" => Ok(WeaponType::Vjaya),
"gaebolg" => Ok(WeaponType::GaeBolg),
"asteronbelt" => Ok(WeaponType::AsteronBelt),
"slicer" => Ok(WeaponType::Slicer),
"spinner" => Ok(WeaponType::Spinner),
"cutter" => Ok(WeaponType::Cutter),
"sawcer" => Ok(WeaponType::Sawcer),
"diska" => Ok(WeaponType::Diska),
"slicerofassassin" => Ok(WeaponType::SlicerOfAssassin),
"diskaofliberator" => Ok(WeaponType::DiskaOfLiberator),
"diskaofbraveman" => Ok(WeaponType::DiskaOfBraveman),
"izmaela" => Ok(WeaponType::Izmaela),
"handgun" => Ok(WeaponType::Handgun),
"autogun" => Ok(WeaponType::Autogun),
"lockgun" => Ok(WeaponType::Lockgun),
"railgun" => Ok(WeaponType::Railgun),
"raygun" => Ok(WeaponType::Raygun),
"varista" => Ok(WeaponType::Varista),
"customrayveroo" => Ok(WeaponType::CustomRayveroo),
"bravace" => Ok(WeaponType::Bravace),
"tensionblaster" => Ok(WeaponType::TensionBlaster),
"rifle" => Ok(WeaponType::Rifle),
"sniper" => Ok(WeaponType::Sniper),
"blaster" => Ok(WeaponType::Blaster),
"beam" => Ok(WeaponType::Beam),
"laser" => Ok(WeaponType::Laser),
"visk235w" => Ok(WeaponType::Visk235w),
"walsmk2" => Ok(WeaponType::Walsmk2),
"justy23st" => Ok(WeaponType::Justy23st),
"rianov303snr" => Ok(WeaponType::Rianov303snr),
"rianov303snr1" => Ok(WeaponType::Rianov303snr1),
"rianov303snr2" => Ok(WeaponType::Rianov303snr2),
"rianov303snr3" => Ok(WeaponType::Rianov303snr3),
"rianov303snr4" => Ok(WeaponType::Rianov303snr4),
"rianov303snr5" => Ok(WeaponType::Rianov303snr5),
"mechgun" => Ok(WeaponType::Mechgun),
"assault" => Ok(WeaponType::Assault),
"repeater" => Ok(WeaponType::Repeater),
"gatling" => Ok(WeaponType::Gatling),
"vulcan" => Ok(WeaponType::Vulcan),
"ma60vise" => Ok(WeaponType::MA60Vise),
"hs25justice" => Ok(WeaponType::HS25Justice),
"lk14combat" => Ok(WeaponType::LK14Combat),
"shot" => Ok(WeaponType::Shot),
"spread" => Ok(WeaponType::Spread),
"cannon" => Ok(WeaponType::Cannon),
"launcher" => Ok(WeaponType::Launcher),
"arms" => Ok(WeaponType::Arms),
"crushbullet" => Ok(WeaponType::CrushBullet),
"meteorsmash" => Ok(WeaponType::MeteorSmash),
"finalimpact" => Ok(WeaponType::FinalImpact),
"cane" => Ok(WeaponType::Cane),
"stick" => Ok(WeaponType::Stick),
"mace" => Ok(WeaponType::Mace),
"club" => Ok(WeaponType::Club),
"cluboflaconium" => Ok(WeaponType::ClubOfLaconium),
"maceofadaman" => Ok(WeaponType::MaceOfAdaman),
"clubofzumiuran" => Ok(WeaponType::ClubOfZumiuran),
"lollipop" => Ok(WeaponType::Lollipop),
"rod" => Ok(WeaponType::Rod),
"pole" => Ok(WeaponType::Pole),
"pillar" => Ok(WeaponType::Pillar),
"striker" => Ok(WeaponType::Striker),
"battleverge" => Ok(WeaponType::BattleVerge),
"bravehammer" => Ok(WeaponType::BraveHammer),
"aliveaqhu" => Ok(WeaponType::AliveAqhu),
"valkyrie" => Ok(WeaponType::Valkyrie),
"wand" => Ok(WeaponType::Wand),
"staff" => Ok(WeaponType::Staff),
"baton" => Ok(WeaponType::Baton),
"scepter" => Ok(WeaponType::Scepter),
"firescepteragni" => Ok(WeaponType::FireScepteragni),
"icestaffdagon" => Ok(WeaponType::IceStaffdagon),
"stormwandindra" => Ok(WeaponType::StormWandindra),
"earthwandbrownie" => Ok(WeaponType::EarthWandBrownie),
"photonclaw" => Ok(WeaponType::PhotonClaw),
"silenceclaw" => Ok(WeaponType::SilenceClaw),
"neisclaw" => Ok(WeaponType::NeisClaw),
"phoenixclaw" => Ok(WeaponType::PhoenixClaw),
"doublesaber" => Ok(WeaponType::DoubleSaber),
"stagcutlery" => Ok(WeaponType::StagCutlery),
"twinbrand" => Ok(WeaponType::TwinBrand),
"braveknuckle" => Ok(WeaponType::BraveKnuckle),
"angryfist" => Ok(WeaponType::AngryFist),
"godhand" => Ok(WeaponType::GodHand),
"sonicknuckle" => Ok(WeaponType::SonicKnuckle),
"login" => Ok(WeaponType::Login),
"orotiagito" => Ok(WeaponType::Orotiagito),
"agito1975" => Ok(WeaponType::Agito1975),
"agito1983" => Ok(WeaponType::Agito1983),
"agito2001" => Ok(WeaponType::Agito2001),
"agito1991" => Ok(WeaponType::Agito1991),
"agito1977" => Ok(WeaponType::Agito1977),
"agito1980" => Ok(WeaponType::Agito1980),
"raikiri" => Ok(WeaponType::Raikiri),
"souleater" => Ok(WeaponType::SoulEater),
"soulbanish" => Ok(WeaponType::SoulBanish),
"spreadneedle" => Ok(WeaponType::SpreadNeedle),
"holyray" => Ok(WeaponType::HolyRay),
"infernobazooka" => Ok(WeaponType::InfernoBazooka),
"ramblingmay" => Ok(WeaponType::RamblingMay),
"lk38combat" => Ok(WeaponType::LK38Combat),
"flamevisit" => Ok(WeaponType::FlameVisit),
"burningvisit" => Ok(WeaponType::BurningVisit),
"akikosfryingpan" => Ok(WeaponType::AkikosFryingPan),
"sorcererscane" => Ok(WeaponType::SorcerersCane),
"sbeatsblade" => Ok(WeaponType::SBeatsBlade),
"parmssblade" => Ok(WeaponType::PArmssBlade),
"delsabersbuster" => Ok(WeaponType::DelsabersBuster),
"bringersrifle" => Ok(WeaponType::BringersRifle),
"eggblaster" => Ok(WeaponType::EggBlaster),
"psychowand" => Ok(WeaponType::PsychoWand),
"heavenpunisher" => Ok(WeaponType::HeavenPunisher),
"laviscannon" => Ok(WeaponType::LavisCannon),
"victoraxe" => Ok(WeaponType::VictorAxe),
"laconiumaxe" => Ok(WeaponType::LaconiumAxe),
"chainsawd" => Ok(WeaponType::ChainSawd),
"caduceus" => Ok(WeaponType::Caduceus),
"mercuriusrod" => Ok(WeaponType::MercuriusRod),
"stingtip" => Ok(WeaponType::StingTip),
"magicalpiece" => Ok(WeaponType::MagicalPiece),
"technicalcrozier" => Ok(WeaponType::TechnicalCrozier),
"suppressedgun" => Ok(WeaponType::SuppressedGun),
"ancientsaber" => Ok(WeaponType::AncientSaber),
"harisenbattlefan" => Ok(WeaponType::HarisenBattleFan),
"yamigarasu" => Ok(WeaponType::Yamigarasu),
"akikoswok" => Ok(WeaponType::AkikosWok),
"toyhammer" => Ok(WeaponType::ToyHammer),
"elysion" => Ok(WeaponType::Elysion),
"redsaber" => Ok(WeaponType::RedSaber),
"meteorcudgel" => Ok(WeaponType::MeteorCudgel),
"monkeykingbar" => Ok(WeaponType::MonkeyKingBar),
"blackkingbar" => Ok(WeaponType::BlackKingBar),
"doublecannon" => Ok(WeaponType::DoubleCannon),
"girasole" => Ok(WeaponType::Girasole),
"hugebattlefan" => Ok(WeaponType::HugeBattleFan),
"tsumikirijsword" => Ok(WeaponType::TsumikiriJSword),
"sealedjsword" => Ok(WeaponType::SealedJSword),
"redsword" => Ok(WeaponType::RedSword),
"crazytune" => Ok(WeaponType::CrazyTune),
"twinchakram" => Ok(WeaponType::TwinChakram),
"wokofakikosshop" => Ok(WeaponType::WokOfAkikosShop),
"lavisblade" => Ok(WeaponType::LavisBlade),
"reddagger" => Ok(WeaponType::RedDagger),
"madamsparasol" => Ok(WeaponType::MadamsParasol),
"madamsumbrella" => Ok(WeaponType::MadamsUmbrella),
"imperialpick" => Ok(WeaponType::ImperialPick),
"berdysh" => Ok(WeaponType::Berdysh),
"redpartisan" => Ok(WeaponType::RedPartisan),
"flightcutter" => Ok(WeaponType::FlightCutter),
"flightfan" => Ok(WeaponType::FlightFan),
"redslicer" => Ok(WeaponType::RedSlicer),
"handgunguld" => Ok(WeaponType::Handgunguld),
"masterraven" => Ok(WeaponType::MasterRaven),
"handgunmilla" => Ok(WeaponType::Handgunmilla),
"lastswan" => Ok(WeaponType::LastSwan),
"redhandgun" => Ok(WeaponType::RedHandgun),
"frozenshooter" => Ok(WeaponType::FrozenShooter),
"snowqueen" => Ok(WeaponType::SnowQueen),
"antiandroidrifle" => Ok(WeaponType::AntiAndroidRifle),
"rocketpunch" => Ok(WeaponType::RocketPunch),
"sambamaracas" => Ok(WeaponType::SambaMaracas),
"twinpsychogun" => Ok(WeaponType::TwinPsychogun),
"drilllauncher" => Ok(WeaponType::DrillLauncher),
"guldmilla" => Ok(WeaponType::GuldMilla),
"dualbird" => Ok(WeaponType::DualBird),
"redmechgun" => Ok(WeaponType::RedMechgun),
"belracannon" => Ok(WeaponType::BelraCannon),
"panzerfaust" => Ok(WeaponType::PanzerFaust),
"ironfaust" => Ok(WeaponType::IronFaust),
"summitmoon" => Ok(WeaponType::SummitMoon),
"windmill" => Ok(WeaponType::Windmill),
"evilcurst" => Ok(WeaponType::EvilCurst),
"flowercane" => Ok(WeaponType::FlowerCane),
"hildebearscane" => Ok(WeaponType::HildebearsCane),
"hildebluescane" => Ok(WeaponType::HildebluesCane),
"rabbitwand" => Ok(WeaponType::RabbitWand),
"plantainleaf" => Ok(WeaponType::PlantainLeaf),
"fatsia" => Ok(WeaponType::Fatsia),
"demonicfork" => Ok(WeaponType::DemonicFork),
"strikerofchao" => Ok(WeaponType::StrikerOfChao),
"broom" => Ok(WeaponType::Broom),
"prophetsofmotav" => Ok(WeaponType::ProphetsOfMotav),
"thesighofagod" => Ok(WeaponType::TheSighOfAGod),
"twinklestar" => Ok(WeaponType::TwinkleStar),
"plantainfan" => Ok(WeaponType::PlantainFan),
"twinblaze" => Ok(WeaponType::TwinBlaze),
"marinasbag" => Ok(WeaponType::MarinasBag),
"dragonsclaw" => Ok(WeaponType::DragonsClaw),
"panthersclaw" => Ok(WeaponType::PanthersClaw),
"sredsblade" => Ok(WeaponType::SRedsBlade),
"plantainhugefan" => Ok(WeaponType::PlantainHugeFan),
"chameleonscythe" => Ok(WeaponType::ChameleonScythe),
"yasminkov3000r" => Ok(WeaponType::Yasminkov3000r),
"anorifle" => Ok(WeaponType::AnoRifle),
"baranzlauncher" => Ok(WeaponType::BaranzLauncher),
"branchofpakupaku" => Ok(WeaponType::BranchOfPakupaku),
"heartofpoumn" => Ok(WeaponType::HeartOfPoumn),
"yasminkov2000h" => Ok(WeaponType::Yasminkov2000h),
"yasminkov7000v" => Ok(WeaponType::Yasminkov7000v),
"yasminkov9000m" => Ok(WeaponType::Yasminkov9000m),
"maserbeam" => Ok(WeaponType::MaserBeam),
"powermaser" => Ok(WeaponType::PowerMaser),
"gamemagazne" => Ok(WeaponType::GameMagazne),
"login" => Ok(WeaponType::Login),
"flowerbouquet" => Ok(WeaponType::FlowerBouquet),
"musashi" => Ok(WeaponType::Musashi),
"yamato" => Ok(WeaponType::Yamato),
"asuka" => Ok(WeaponType::Asuka),
"sangeyasha" => Ok(WeaponType::SangeYasha),
"sange" => Ok(WeaponType::Sange),
"yasha" => Ok(WeaponType::Yasha),
"kamui" => Ok(WeaponType::Kamui),
"photonlauncher" => Ok(WeaponType::PhotonLauncher),
"guiltylight" => Ok(WeaponType::GuiltyLight),
"redscorpio" => Ok(WeaponType::RedScorpio),
"phononmaser" => Ok(WeaponType::PhononMaser),
"talis" => Ok(WeaponType::Talis),
"mahu" => Ok(WeaponType::Mahu),
"hitogata" => Ok(WeaponType::Hitogata),
"dancinghitogata" => Ok(WeaponType::DancingHitogata),
"kunai" => Ok(WeaponType::Kunai),
"nug2000bazooka" => Ok(WeaponType::Nug2000bazooka),
"sberillshands0" => Ok(WeaponType::SBerillsHands0),
"sberillshands1" => Ok(WeaponType::SBerillsHands1),
"flowenssword3060" => Ok(WeaponType::FlowensSword3060),
"flowenssword3064" => Ok(WeaponType::FlowensSword3064),
"flowenssword3067" => Ok(WeaponType::FlowensSword3067),
"flowenssword3073" => Ok(WeaponType::FlowensSword3073),
"flowenssword3077" => Ok(WeaponType::FlowensSword3077),
"flowenssword3082" => Ok(WeaponType::FlowensSword3082),
"flowenssword3083" => Ok(WeaponType::FlowensSword3083),
"flowenssword3084" => Ok(WeaponType::FlowensSword3084),
"flowenssword3079" => Ok(WeaponType::FlowensSword3079),
"dbssaber3062" => Ok(WeaponType::DbsSaber3062),
"dbssaber3067" => Ok(WeaponType::DbsSaber3067),
"dbssaber3069chris" => Ok(WeaponType::DbsSaber3069Chris),
"dbssaber3064" => Ok(WeaponType::DbsSaber3064),
"dbssaber3069torato" => Ok(WeaponType::DbsSaber3069Torato),
"dbssaber3073" => Ok(WeaponType::DbsSaber3073),
"dbssaber3070" => Ok(WeaponType::DbsSaber3070),
"dbssaber3075" => Ok(WeaponType::DbsSaber3075),
"dbssaber3077" => Ok(WeaponType::DbsSaber3077),
"giguebazooka" => Ok(WeaponType::GiGueBazooka),
"guardianna" => Ok(WeaponType::Guardianna),
"viridiacard" => Ok(WeaponType::ViridiaCard),
"greenillcard" => Ok(WeaponType::GreenillCard),
"skylycard" => Ok(WeaponType::SkylyCard),
"bluefullcard" => Ok(WeaponType::BluefullCard),
"purplenumcard" => Ok(WeaponType::PurplenumCard),
"pinkalcard" => Ok(WeaponType::PinkalCard),
"redriacard" => Ok(WeaponType::RedriaCard),
"orancard" => Ok(WeaponType::OranCard),
"yellowbozecard" => Ok(WeaponType::YellowbozeCard),
"whitillcard" => Ok(WeaponType::WhitillCard),
"morningglory" => Ok(WeaponType::MorningGlory),
"partisanoflightning" => Ok(WeaponType::PartisanofLightning),
"galwind" => Ok(WeaponType::GalWind),
"zanba" => Ok(WeaponType::Zanba),
"rikasclaw" => Ok(WeaponType::RikasClaw),
"angelharp" => Ok(WeaponType::AngelHarp),
"demolitioncomet" => Ok(WeaponType::DemolitionComet),
"neisclaw" => Ok(WeaponType::NeisClaw),
"rainbowbaton" => Ok(WeaponType::RainbowBaton),
"darkflow" => Ok(WeaponType::DarkFlow),
"darkmeteor" => Ok(WeaponType::DarkMeteor),
"darkbridge" => Ok(WeaponType::DarkBridge),
"gassassinssabers" => Ok(WeaponType::GAssassinsSabers),
"rappysfan" => Ok(WeaponType::RappysFan),
"boomasclaw" => Ok(WeaponType::BoomasClaw),
"goboomasclaw" => Ok(WeaponType::GoboomasClaw),
"gigoboomasclaw" => Ok(WeaponType::GigoboomasClaw),
"rubybullet" => Ok(WeaponType::RubyBullet),
"amorerose" => Ok(WeaponType::AmoreRose),
"sliceroffanatic" => Ok(WeaponType::SlicerOfFanatic),
"lamedargent" => Ok(WeaponType::LameDArgent),
"excalibur" => Ok(WeaponType::Excalibur),
"ragedefeu" => Ok(WeaponType::RageDeFeu),
"ragedefeu" => Ok(WeaponType::RageDeFeu),
"ragedefeu" => Ok(WeaponType::RageDeFeu),
"ragedefeu" => Ok(WeaponType::RageDeFeu),
"daisychain" => Ok(WeaponType::DaisyChain),
"ophelieseize" => Ok(WeaponType::OphelieSeize),
"millemarteaux" => Ok(WeaponType::MilleMarteaux),
"lecogneur" => Ok(WeaponType::LeCogneur),
"commanderblade" => Ok(WeaponType::CommanderBlade),
"vivienne" => Ok(WeaponType::Vivienne),
"kusanagi" => Ok(WeaponType::Kusanagi),
"sacredduster" => Ok(WeaponType::SacredDuster),
"guren" => Ok(WeaponType::Guren),
"shouren" => Ok(WeaponType::Shouren),
"jizai" => Ok(WeaponType::Jizai),
"flamberge" => Ok(WeaponType::Flamberge),
"yunchang" => Ok(WeaponType::Yunchang),
"snakespire" => Ok(WeaponType::SnakeSpire),
"flapjackflapper" => Ok(WeaponType::FlapjackFlapper),
"getsugasan" => Ok(WeaponType::Getsugasan),
"maguwa" => Ok(WeaponType::Maguwa),
"heavenstriker" => Ok(WeaponType::HeavenStriker),
"cannonrouge" => Ok(WeaponType::CannonRouge),
"meteorrouge" => Ok(WeaponType::MeteorRouge),
"solferino" => Ok(WeaponType::Solferino),
"clio" => Ok(WeaponType::Clio),
"sirenglasshammer" => Ok(WeaponType::SirenGlassHammer),
"glidedivine" => Ok(WeaponType::GlideDivine),
"shichishito" => Ok(WeaponType::Shichishito),
"murasame" => Ok(WeaponType::Murasame),
"daylightscar" => Ok(WeaponType::DaylightScar),
"decalog" => Ok(WeaponType::Decalog),
"5thannivblade" => Ok(WeaponType::5thAnnivBlade),
"tyrellsparasol" => Ok(WeaponType::TyrellsParasol),
"akikoscleaver" => Ok(WeaponType::AkikosCleaver),
"tanegashima" => Ok(WeaponType::Tanegashima),
"treeclippers" => Ok(WeaponType::TreeClippers),
"niceshot" => Ok(WeaponType::NiceShot),
"unknown3" => Ok(WeaponType::Unknown3),
"unknown4" => Ok(WeaponType::Unknown4),
"anobazooka" => Ok(WeaponType::AnoBazooka),
"synthesizer" => Ok(WeaponType::Synthesizer),
"bamboospear" => Ok(WeaponType::BambooSpear),
"kaneitsuho" => Ok(WeaponType::KaneiTsuho),
"jitte" => Ok(WeaponType::Jitte),
"butterflynet" => Ok(WeaponType::ButterflyNet),
"syringe" => Ok(WeaponType::Syringe),
"battledore" => Ok(WeaponType::Battledore),
"racket" => Ok(WeaponType::Racket),
"hammer" => Ok(WeaponType::Hammer),
"greatbouquet" => Ok(WeaponType::GreatBouquet),
"typesasaber" => Ok(WeaponType::TypesaSaber),
"typeslsaber" => Ok(WeaponType::TypeslSaber),
"typeslslicer" => Ok(WeaponType::TypeslSlicer),
"typeslclaw" => Ok(WeaponType::TypeslClaw),
"typeslkatana" => Ok(WeaponType::TypeslKatana),
"typejssaber" => Ok(WeaponType::TypejsSaber),
"typejsslicer" => Ok(WeaponType::TypejsSlicer),
"typejsjsword" => Ok(WeaponType::TypejsJSword),
"typeswsword" => Ok(WeaponType::TypeswSword),
"typeswslicer" => Ok(WeaponType::TypeswSlicer),
"typeswjsword" => Ok(WeaponType::TypeswJSword),
"typerosword" => Ok(WeaponType::TyperoSword),
"typerohalbert" => Ok(WeaponType::TyperoHalbert),
"typerorod" => Ok(WeaponType::TyperoRod),
"typeblblade" => Ok(WeaponType::TypeblBlade),
"typeknblade" => Ok(WeaponType::TypeknBlade),
"typeknclaw" => Ok(WeaponType::TypeknClaw),
"typehahalbert" => Ok(WeaponType::TypehaHalbert),
"typeharod" => Ok(WeaponType::TypehaRod),
"typedsdsaber" => Ok(WeaponType::TypedsDSaber),
"typedsrod" => Ok(WeaponType::TypedsRod),
"typeds" => Ok(WeaponType::Typeds),
"typeclclaw" => Ok(WeaponType::TypeclClaw),
"typesssw" => Ok(WeaponType::TypessSw),
"typeguhand" => Ok(WeaponType::TypeguHand),
"typegumechgun" => Ok(WeaponType::TypeguMechgun),
"typeririfle" => Ok(WeaponType::TyperiRifle),
"typememechgun" => Ok(WeaponType::TypemeMechgun),
"typeshshot" => Ok(WeaponType::TypeshShot),
"typewawand" => Ok(WeaponType::TypewaWand),
"????" => Ok(WeaponType::????),

            _ => Err(ItemParseError::UnknownItem(String::from(value)))
        }
    }
}

impl WeaponType {
    pub fn as_value(&self) -> u32 {
        match self {
            WeaponType::Saber => 0x000000,
WeaponType::Saber => 0x000100,
WeaponType::Brand => 0x000101,
WeaponType::Buster => 0x000102,
WeaponType::Pallasch => 0x000103,
WeaponType::Gladius => 0x000104,
WeaponType::DbsSaber => 0x000105,
WeaponType::Kaladbolg => 0x000106,
WeaponType::Durandal => 0x000107,
WeaponType::Galatine => 0x000108,
WeaponType::Sword => 0x000200,
WeaponType::Gigush => 0x000201,
WeaponType::Breaker => 0x000202,
WeaponType::Claymore => 0x000203,
WeaponType::Calibur => 0x000204,
WeaponType::FlowensSword => 0x000205,
WeaponType::LastSurvivor => 0x000206,
WeaponType::DragonSlayer => 0x000207,
WeaponType::Dagger => 0x000300,
WeaponType::Knife => 0x000301,
WeaponType::Blade => 0x000302,
WeaponType::Edge => 0x000303,
WeaponType::Ripper => 0x000304,
WeaponType::BladeDance => 0x000305,
WeaponType::BloodyArt => 0x000306,
WeaponType::CrossScar => 0x000307,
WeaponType::ZeroDivide => 0x000308,
WeaponType::TwoKamui => 0x000309,
WeaponType::Partisan => 0x000400,
WeaponType::Halbert => 0x000401,
WeaponType::Glaive => 0x000402,
WeaponType::Berdys => 0x000403,
WeaponType::Gungnir => 0x000404,
WeaponType::Brionac => 0x000405,
WeaponType::Vjaya => 0x000406,
WeaponType::GaeBolg => 0x000407,
WeaponType::AsteronBelt => 0x000408,
WeaponType::Slicer => 0x000500,
WeaponType::Spinner => 0x000501,
WeaponType::Cutter => 0x000502,
WeaponType::Sawcer => 0x000503,
WeaponType::Diska => 0x000504,
WeaponType::SlicerOfAssassin => 0x000505,
WeaponType::DiskaOfLiberator => 0x000506,
WeaponType::DiskaOfBraveman => 0x000507,
WeaponType::Izmaela => 0x000508,
WeaponType::Handgun => 0x000600,
WeaponType::Autogun => 0x000601,
WeaponType::Lockgun => 0x000602,
WeaponType::Railgun => 0x000603,
WeaponType::Raygun => 0x000604,
WeaponType::Varista => 0x000605,
WeaponType::CustomRayveroo => 0x000606,
WeaponType::Bravace => 0x000607,
WeaponType::TensionBlaster => 0x000608,
WeaponType::Rifle => 0x000700,
WeaponType::Sniper => 0x000701,
WeaponType::Blaster => 0x000702,
WeaponType::Beam => 0x000703,
WeaponType::Laser => 0x000704,
WeaponType::Visk235w => 0x000705,
WeaponType::Walsmk2 => 0x000706,
WeaponType::Justy23st => 0x000707,
WeaponType::Rianov303snr => 0x000708,
WeaponType::Rianov303snr1 => 0x000709,
WeaponType::Rianov303snr2 => 0x00070A,
WeaponType::Rianov303snr3 => 0x00070B,
WeaponType::Rianov303snr4 => 0x00070C,
WeaponType::Rianov303snr5 => 0x00070D,
WeaponType::Mechgun => 0x000800,
WeaponType::Assault => 0x000801,
WeaponType::Repeater => 0x000802,
WeaponType::Gatling => 0x000803,
WeaponType::Vulcan => 0x000804,
WeaponType::MA60Vise => 0x000805,
WeaponType::HS25Justice => 0x000806,
WeaponType::LK14Combat => 0x000807,
WeaponType::Shot => 0x000900,
WeaponType::Spread => 0x000901,
WeaponType::Cannon => 0x000902,
WeaponType::Launcher => 0x000903,
WeaponType::Arms => 0x000904,
WeaponType::CrushBullet => 0x000905,
WeaponType::MeteorSmash => 0x000906,
WeaponType::FinalImpact => 0x000907,
WeaponType::Cane => 0x000A00,
WeaponType::Stick => 0x000A01,
WeaponType::Mace => 0x000A02,
WeaponType::Club => 0x000A03,
WeaponType::ClubOfLaconium => 0x000A04,
WeaponType::MaceOfAdaman => 0x000A05,
WeaponType::ClubOfZumiuran => 0x000A06,
WeaponType::Lollipop => 0x000A07,
WeaponType::Rod => 0x000B00,
WeaponType::Pole => 0x000B01,
WeaponType::Pillar => 0x000B02,
WeaponType::Striker => 0x000B03,
WeaponType::BattleVerge => 0x000B04,
WeaponType::BraveHammer => 0x000B05,
WeaponType::AliveAqhu => 0x000B06,
WeaponType::Valkyrie => 0x000B07,
WeaponType::Wand => 0x000C00,
WeaponType::Staff => 0x000C01,
WeaponType::Baton => 0x000C02,
WeaponType::Scepter => 0x000C03,
WeaponType::FireScepteragni => 0x000C04,
WeaponType::IceStaffdagon => 0x000C05,
WeaponType::StormWandindra => 0x000C06,
WeaponType::EarthWandBrownie => 0x000C07,
WeaponType::PhotonClaw => 0x000D00,
WeaponType::SilenceClaw => 0x000D01,
WeaponType::NeisClaw => 0x000D02,
WeaponType::PhoenixClaw => 0x000D03,
WeaponType::DoubleSaber => 0x000E00,
WeaponType::StagCutlery => 0x000E01,
WeaponType::TwinBrand => 0x000E02,
WeaponType::BraveKnuckle => 0x000F00,
WeaponType::AngryFist => 0x000F01,
WeaponType::GodHand => 0x000F02,
WeaponType::SonicKnuckle => 0x000F03,
WeaponType::Login => 0x000F04,
WeaponType::Orotiagito => 0x001000,
WeaponType::Agito1975 => 0x001001,
WeaponType::Agito1983 => 0x001002,
WeaponType::Agito2001 => 0x001003,
WeaponType::Agito1991 => 0x001004,
WeaponType::Agito1977 => 0x001005,
WeaponType::Agito1980 => 0x001006,
WeaponType::Raikiri => 0x001007,
WeaponType::SoulEater => 0x001100,
WeaponType::SoulBanish => 0x001101,
WeaponType::SpreadNeedle => 0x001200,
WeaponType::HolyRay => 0x001300,
WeaponType::InfernoBazooka => 0x001400,
WeaponType::RamblingMay => 0x001401,
WeaponType::LK38Combat => 0x001402,
WeaponType::FlameVisit => 0x001500,
WeaponType::BurningVisit => 0x001501,
WeaponType::AkikosFryingPan => 0x001600,
WeaponType::SorcerersCane => 0x001700,
WeaponType::SBeatsBlade => 0x001800,
WeaponType::PArmssBlade => 0x001900,
WeaponType::DelsabersBuster => 0x001A00,
WeaponType::BringersRifle => 0x001B00,
WeaponType::EggBlaster => 0x001C00,
WeaponType::PsychoWand => 0x001D00,
WeaponType::HeavenPunisher => 0x001E00,
WeaponType::LavisCannon => 0x001F00,
WeaponType::VictorAxe => 0x002000,
WeaponType::LaconiumAxe => 0x002001,
WeaponType::ChainSawd => 0x002100,
WeaponType::Caduceus => 0x002200,
WeaponType::MercuriusRod => 0x002201,
WeaponType::StingTip => 0x002300,
WeaponType::MagicalPiece => 0x002400,
WeaponType::TechnicalCrozier => 0x002500,
WeaponType::SuppressedGun => 0x002600,
WeaponType::AncientSaber => 0x002700,
WeaponType::HarisenBattleFan => 0x002800,
WeaponType::Yamigarasu => 0x002900,
WeaponType::AkikosWok => 0x002A00,
WeaponType::ToyHammer => 0x002B00,
WeaponType::Elysion => 0x002C00,
WeaponType::RedSaber => 0x002D00,
WeaponType::MeteorCudgel => 0x002E00,
WeaponType::MonkeyKingBar => 0x002F00,
WeaponType::BlackKingBar => 0x002F01,
WeaponType::DoubleCannon => 0x003000,
WeaponType::Girasole => 0x003001,
WeaponType::HugeBattleFan => 0x003100,
WeaponType::TsumikiriJSword => 0x003200,
WeaponType::SealedJSword => 0x003300,
WeaponType::RedSword => 0x003400,
WeaponType::CrazyTune => 0x003500,
WeaponType::TwinChakram => 0x003600,
WeaponType::WokOfAkikosShop => 0x003700,
WeaponType::LavisBlade => 0x003800,
WeaponType::RedDagger => 0x003900,
WeaponType::MadamsParasol => 0x003A00,
WeaponType::MadamsUmbrella => 0x003B00,
WeaponType::ImperialPick => 0x003C00,
WeaponType::Berdysh => 0x003D00,
WeaponType::RedPartisan => 0x003E00,
WeaponType::FlightCutter => 0x003F00,
WeaponType::FlightFan => 0x004000,
WeaponType::RedSlicer => 0x004100,
WeaponType::Handgunguld => 0x004200,
WeaponType::MasterRaven => 0x004201,
WeaponType::Handgunmilla => 0x004300,
WeaponType::LastSwan => 0x004301,
WeaponType::RedHandgun => 0x004400,
WeaponType::FrozenShooter => 0x004500,
WeaponType::SnowQueen => 0x004501,
WeaponType::AntiAndroidRifle => 0x004600,
WeaponType::RocketPunch => 0x004700,
WeaponType::SambaMaracas => 0x004800,
WeaponType::TwinPsychogun => 0x004900,
WeaponType::DrillLauncher => 0x004A00,
WeaponType::GuldMilla => 0x004B00,
WeaponType::DualBird => 0x004B01,
WeaponType::RedMechgun => 0x004C00,
WeaponType::BelraCannon => 0x004D00,
WeaponType::PanzerFaust => 0x004E00,
WeaponType::IronFaust => 0x004E01,
WeaponType::SummitMoon => 0x004F00,
WeaponType::Windmill => 0x005000,
WeaponType::EvilCurst => 0x005100,
WeaponType::FlowerCane => 0x005200,
WeaponType::HildebearsCane => 0x005300,
WeaponType::HildebluesCane => 0x005400,
WeaponType::RabbitWand => 0x005500,
WeaponType::PlantainLeaf => 0x005600,
WeaponType::Fatsia => 0x005601,
WeaponType::DemonicFork => 0x005700,
WeaponType::StrikerOfChao => 0x005800,
WeaponType::Broom => 0x005900,
WeaponType::ProphetsOfMotav => 0x005A00,
WeaponType::TheSighOfAGod => 0x005B00,
WeaponType::TwinkleStar => 0x005C00,
WeaponType::PlantainFan => 0x005D00,
WeaponType::TwinBlaze => 0x005E00,
WeaponType::MarinasBag => 0x005F00,
WeaponType::DragonsClaw => 0x006000,
WeaponType::PanthersClaw => 0x006100,
WeaponType::SRedsBlade => 0x006200,
WeaponType::PlantainHugeFan => 0x006300,
WeaponType::ChameleonScythe => 0x006400,
WeaponType::Yasminkov3000r => 0x006500,
WeaponType::AnoRifle => 0x006600,
WeaponType::BaranzLauncher => 0x006700,
WeaponType::BranchOfPakupaku => 0x006800,
WeaponType::HeartOfPoumn => 0x006900,
WeaponType::Yasminkov2000h => 0x006A00,
WeaponType::Yasminkov7000v => 0x006B00,
WeaponType::Yasminkov9000m => 0x006C00,
WeaponType::MaserBeam => 0x006D00,
WeaponType::PowerMaser => 0x006D01,
WeaponType::GameMagazne => 0x006E00,
WeaponType::Login => 0x006E01,
WeaponType::FlowerBouquet => 0x006F00,
WeaponType::Musashi => 0x008900,
WeaponType::Yamato => 0x008901,
WeaponType::Asuka => 0x008902,
WeaponType::SangeYasha => 0x008903,
WeaponType::Sange => 0x008A00,
WeaponType::Yasha => 0x008A01,
WeaponType::Kamui => 0x008A02,
WeaponType::PhotonLauncher => 0x008B00,
WeaponType::GuiltyLight => 0x008B01,
WeaponType::RedScorpio => 0x008B02,
WeaponType::PhononMaser => 0x008B03,
WeaponType::Talis => 0x008C00,
WeaponType::Mahu => 0x008C01,
WeaponType::Hitogata => 0x008C02,
WeaponType::DancingHitogata => 0x008C03,
WeaponType::Kunai => 0x008C04,
WeaponType::Nug2000bazooka => 0x008D00,
WeaponType::SBerillsHands0 => 0x008E00,
WeaponType::SBerillsHands1 => 0x008E01,
WeaponType::FlowensSword3060 => 0x008F00,
WeaponType::FlowensSword3064 => 0x008F01,
WeaponType::FlowensSword3067 => 0x008F02,
WeaponType::FlowensSword3073 => 0x008F03,
WeaponType::FlowensSword3077 => 0x008F04,
WeaponType::FlowensSword3082 => 0x008F05,
WeaponType::FlowensSword3083 => 0x008F06,
WeaponType::FlowensSword3084 => 0x008F07,
WeaponType::FlowensSword3079 => 0x008F08,
WeaponType::DbsSaber3062 => 0x009000,
WeaponType::DbsSaber3067 => 0x009001,
WeaponType::DbsSaber3069Chris => 0x009002,
WeaponType::DbsSaber3064 => 0x009003,
WeaponType::DbsSaber3069Torato => 0x009004,
WeaponType::DbsSaber3073 => 0x009005,
WeaponType::DbsSaber3070 => 0x009006,
WeaponType::DbsSaber3075 => 0x009007,
WeaponType::DbsSaber3077 => 0x009008,
WeaponType::GiGueBazooka => 0x009100,
WeaponType::Guardianna => 0x009200,
WeaponType::ViridiaCard => 0x009300,
WeaponType::GreenillCard => 0x009301,
WeaponType::SkylyCard => 0x009302,
WeaponType::BluefullCard => 0x009303,
WeaponType::PurplenumCard => 0x009304,
WeaponType::PinkalCard => 0x009305,
WeaponType::RedriaCard => 0x009306,
WeaponType::OranCard => 0x009307,
WeaponType::YellowbozeCard => 0x009308,
WeaponType::WhitillCard => 0x009309,
WeaponType::MorningGlory => 0x009400,
WeaponType::PartisanofLightning => 0x009500,
WeaponType::GalWind => 0x009600,
WeaponType::Zanba => 0x009700,
WeaponType::RikasClaw => 0x009800,
WeaponType::AngelHarp => 0x009900,
WeaponType::DemolitionComet => 0x009A00,
WeaponType::NeisClaw => 0x009B00,
WeaponType::RainbowBaton => 0x009C00,
WeaponType::DarkFlow => 0x009D00,
WeaponType::DarkMeteor => 0x009E00,
WeaponType::DarkBridge => 0x009F00,
WeaponType::GAssassinsSabers => 0x00A000,
WeaponType::RappysFan => 0x00A100,
WeaponType::BoomasClaw => 0x00A200,
WeaponType::GoboomasClaw => 0x00A201,
WeaponType::GigoboomasClaw => 0x00A202,
WeaponType::RubyBullet => 0x00A300,
WeaponType::AmoreRose => 0x00A400,
WeaponType::SlicerOfFanatic => 0x00AA00,
WeaponType::LameDArgent => 0x00AB00,
WeaponType::Excalibur => 0x00AC00,
WeaponType::RageDeFeu => 0x00AD00,
WeaponType::RageDeFeu => 0x00AD01,
WeaponType::RageDeFeu => 0x00AD02,
WeaponType::RageDeFeu => 0x00AD03,
WeaponType::DaisyChain => 0x00AE00,
WeaponType::OphelieSeize => 0x00AF00,
WeaponType::MilleMarteaux => 0x00B000,
WeaponType::LeCogneur => 0x00B100,
WeaponType::CommanderBlade => 0x00B200,
WeaponType::Vivienne => 0x00B300,
WeaponType::Kusanagi => 0x00B400,
WeaponType::SacredDuster => 0x00B500,
WeaponType::Guren => 0x00B600,
WeaponType::Shouren => 0x00B700,
WeaponType::Jizai => 0x00B800,
WeaponType::Flamberge => 0x00B900,
WeaponType::Yunchang => 0x00BA00,
WeaponType::SnakeSpire => 0x00BB00,
WeaponType::FlapjackFlapper => 0x00BC00,
WeaponType::Getsugasan => 0x00BD00,
WeaponType::Maguwa => 0x00BE00,
WeaponType::HeavenStriker => 0x00BF00,
WeaponType::CannonRouge => 0x00C000,
WeaponType::MeteorRouge => 0x00C100,
WeaponType::Solferino => 0x00C200,
WeaponType::Clio => 0x00C300,
WeaponType::SirenGlassHammer => 0x00C400,
WeaponType::GlideDivine => 0x00C500,
WeaponType::Shichishito => 0x00C600,
WeaponType::Murasame => 0x00C700,
WeaponType::DaylightScar => 0x00C800,
WeaponType::Decalog => 0x00C900,
WeaponType::5thAnnivBlade => 0x00CA00,
WeaponType::TyrellsParasol => 0x00CB00,
WeaponType::AkikosCleaver => 0x00CC00,
WeaponType::Tanegashima => 0x00CD00,
WeaponType::TreeClippers => 0x00CE00,
WeaponType::NiceShot => 0x00CF00,
WeaponType::Unknown3 => 0x00D000,
WeaponType::Unknown4 => 0x00D100,
WeaponType::AnoBazooka => 0x00D200,
WeaponType::Synthesizer => 0x00D300,
WeaponType::BambooSpear => 0x00D400,
WeaponType::KaneiTsuho => 0x00D500,
WeaponType::Jitte => 0x00D600,
WeaponType::ButterflyNet => 0x00D700,
WeaponType::Syringe => 0x00D800,
WeaponType::Battledore => 0x00D900,
WeaponType::Racket => 0x00DA00,
WeaponType::Hammer => 0x00DB00,
WeaponType::GreatBouquet => 0x00DC00,
WeaponType::TypesaSaber => 0x00DD00,
WeaponType::TypeslSaber => 0x00DE00,
WeaponType::TypeslSlicer => 0x00DE01,
WeaponType::TypeslClaw => 0x00DE02,
WeaponType::TypeslKatana => 0x00DE03,
WeaponType::TypejsSaber => 0x00DF00,
WeaponType::TypejsSlicer => 0x00DF01,
WeaponType::TypejsJSword => 0x00DF02,
WeaponType::TypeswSword => 0x00E000,
WeaponType::TypeswSlicer => 0x00E001,
WeaponType::TypeswJSword => 0x00E002,
WeaponType::TyperoSword => 0x00E100,
WeaponType::TyperoHalbert => 0x00E101,
WeaponType::TyperoRod => 0x00E102,
WeaponType::TypeblBlade => 0x00E200,
WeaponType::TypeknBlade => 0x00E300,
WeaponType::TypeknClaw => 0x00E301,
WeaponType::TypehaHalbert => 0x00E400,
WeaponType::TypehaRod => 0x00E401,
WeaponType::TypedsDSaber => 0x00E500,
WeaponType::TypedsRod => 0x00E501,
WeaponType::Typeds => 0x00E502,
WeaponType::TypeclClaw => 0x00E600,
WeaponType::TypessSw => 0x00E700,
WeaponType::TypeguHand => 0x00E800,
WeaponType::TypeguMechgun => 0x00E801,
WeaponType::TyperiRifle => 0x00E900,
WeaponType::TypemeMechgun => 0x00EA00,
WeaponType::TypeshShot => 0x00EB00,
WeaponType::TypewaWand => 0x00EC00,
WeaponType::???? => 0x00ED00,
        }
    }
}

#[derive(Debug)]
pub struct Weapon {
    pub weapon: WeaponType,
    pub special: Option<WeaponSpecial>,
    pub grind: u8,
    pub attrs: [Option<WeaponAttribute>; 3],
}

impl ItemData for Weapon {
    fn row1(&self) -> u32 {
        (self.weapon.as_value() << 8) | (self.grind as u32)
    }

    fn row2(&self) -> u32 {
        let mut row2 = 0;
        if let Some(ref special) = self.special {
            row2 |= (special.as_value() as u32) << 24;
        };
        if let Some(ref attr) = self.attrs[0] {
            row2 |= attr.as_value() as u32;
        };
        row2
    }

    fn row3(&self) -> u32 {
        let mut row3 = 0;
        if let Some(ref attr) = self.attrs[1] {
            row3 |= (attr.as_value() as u32 ) << 16
        };
        if let Some(ref attr) = self.attrs[2] {
            row3 |= attr.as_value() as u32
        };
        row3
    }

    fn row4(&self) -> u32 {
        0
    }
}

#[derive(Debug)]
pub enum ESWeaponType {
}

struct ESWeapon {
    weapon: ESWeaponType,
    name: String,
}

pub enum ArmorType {
    Frame,
    Armor,
    PsyArmor,
    GigaFrame,
    SoulFrame,
    CrossArmor,
    SolidFrame,
    BraveArmor,
    HyperFrame,
    GrandArmor,
    ShockFrame,
    KingsFrame,
    DragonFrame,
    AbsorbArmor,
    ProtectFrame,
    GeneralArmor,
    PerfectFrame,
    ValiantFrame,
    ImperialArmor,
    HolinessArmor,
    GuardianArmor,
    DivinityArmor,
    UltimateFrame,
    CelestialArmor,
    HunterField,
    RangerField,
    ForceField,
    RevivalGarment,
    SpiritGarment,
    StinkFrame,
    DPartsver101,
    DPartsver210,
    ParasiteWeardeRol,
    ParasiteWearnelgal,
    ParasiteWearvajulla,
    SensePlate,
    GravitonPlate,
    AttributePlate,
    FlowensFrame,
    CustomFrameveroo,
    DbsArmor,
    GuardWave,
    DfField,
    LuminousField,
    ChuChuFever,
    LoveHeart,
    FlameGarment,
    VirusArmorlafuteria,
    BrightnessCircle,
    AuraField,
    ElectroFrame,
    SacredCloth,
    SmokingPlate,
    StarCuirass,
    BlackHoundCuirass,
    MorningPrayer,
    BlackOdoshiDomaru,
    RedOdoshiDomaru,
    BlackOdoshiRedNimaidou,
    BlueOdoshiVioletNimaidou,
    DirtyLifejacket,
    KroesSweater,
    WeddingDress,
    SonicteamArmor,
    RedCoat,
    Thirteen,
    MotherGarb,
    MotherGarb,
    DressPlate,
    Sweetheart,
    IgnitionCloak,
    CongealCloak,
    TempestCloak,
    CursedCloak,
    SelectCloak,
    SpiritCuirass,
    RevivalCuriass,
    AllianceUniform,
    OfficerUniform,
    CommanderUniform,
    CrimsonCoat,
    InfantryGear,
    LieutenantGear,
    InfantryMantle,
    LieutenantMantle,
    UnionField,
    SamuraiArmor,
    StealthSuit,
    ????,
}

impl TryFrom<&str> for ArmorType {
    type Error = ItemParseError;
    fn try_from(value: &str) -> Result<ArmorType, Self::Error> {
        match value {
            "frame" => Ok(ArmorType::Frame),
"armor" => Ok(ArmorType::Armor),
"psyarmor" => Ok(ArmorType::PsyArmor),
"gigaframe" => Ok(ArmorType::GigaFrame),
"soulframe" => Ok(ArmorType::SoulFrame),
"crossarmor" => Ok(ArmorType::CrossArmor),
"solidframe" => Ok(ArmorType::SolidFrame),
"bravearmor" => Ok(ArmorType::BraveArmor),
"hyperframe" => Ok(ArmorType::HyperFrame),
"grandarmor" => Ok(ArmorType::GrandArmor),
"shockframe" => Ok(ArmorType::ShockFrame),
"kingsframe" => Ok(ArmorType::KingsFrame),
"dragonframe" => Ok(ArmorType::DragonFrame),
"absorbarmor" => Ok(ArmorType::AbsorbArmor),
"protectframe" => Ok(ArmorType::ProtectFrame),
"generalarmor" => Ok(ArmorType::GeneralArmor),
"perfectframe" => Ok(ArmorType::PerfectFrame),
"valiantframe" => Ok(ArmorType::ValiantFrame),
"imperialarmor" => Ok(ArmorType::ImperialArmor),
"holinessarmor" => Ok(ArmorType::HolinessArmor),
"guardianarmor" => Ok(ArmorType::GuardianArmor),
"divinityarmor" => Ok(ArmorType::DivinityArmor),
"ultimateframe" => Ok(ArmorType::UltimateFrame),
"celestialarmor" => Ok(ArmorType::CelestialArmor),
"hunterfield" => Ok(ArmorType::HunterField),
"rangerfield" => Ok(ArmorType::RangerField),
"forcefield" => Ok(ArmorType::ForceField),
"revivalgarment" => Ok(ArmorType::RevivalGarment),
"spiritgarment" => Ok(ArmorType::SpiritGarment),
"stinkframe" => Ok(ArmorType::StinkFrame),
"dpartsver101" => Ok(ArmorType::DPartsver101),
"dpartsver210" => Ok(ArmorType::DPartsver210),
"parasitewearderol" => Ok(ArmorType::ParasiteWeardeRol),
"parasitewearnelgal" => Ok(ArmorType::ParasiteWearnelgal),
"parasitewearvajulla" => Ok(ArmorType::ParasiteWearvajulla),
"senseplate" => Ok(ArmorType::SensePlate),
"gravitonplate" => Ok(ArmorType::GravitonPlate),
"attributeplate" => Ok(ArmorType::AttributePlate),
"flowensframe" => Ok(ArmorType::FlowensFrame),
"customframeveroo" => Ok(ArmorType::CustomFrameveroo),
"dbsarmor" => Ok(ArmorType::DbsArmor),
"guardwave" => Ok(ArmorType::GuardWave),
"dffield" => Ok(ArmorType::DfField),
"luminousfield" => Ok(ArmorType::LuminousField),
"chuchufever" => Ok(ArmorType::ChuChuFever),
"loveheart" => Ok(ArmorType::LoveHeart),
"flamegarment" => Ok(ArmorType::FlameGarment),
"virusarmorlafuteria" => Ok(ArmorType::VirusArmorlafuteria),
"brightnesscircle" => Ok(ArmorType::BrightnessCircle),
"aurafield" => Ok(ArmorType::AuraField),
"electroframe" => Ok(ArmorType::ElectroFrame),
"sacredcloth" => Ok(ArmorType::SacredCloth),
"smokingplate" => Ok(ArmorType::SmokingPlate),
"starcuirass" => Ok(ArmorType::StarCuirass),
"blackhoundcuirass" => Ok(ArmorType::BlackHoundCuirass),
"morningprayer" => Ok(ArmorType::MorningPrayer),
"blackodoshidomaru" => Ok(ArmorType::BlackOdoshiDomaru),
"redodoshidomaru" => Ok(ArmorType::RedOdoshiDomaru),
"blackodoshirednimaidou" => Ok(ArmorType::BlackOdoshiRedNimaidou),
"blueodoshivioletnimaidou" => Ok(ArmorType::BlueOdoshiVioletNimaidou),
"dirtylifejacket" => Ok(ArmorType::DirtyLifejacket),
"kroessweater" => Ok(ArmorType::KroesSweater),
"weddingdress" => Ok(ArmorType::WeddingDress),
"sonicteamarmor" => Ok(ArmorType::SonicteamArmor),
"redcoat" => Ok(ArmorType::RedCoat),
"thirteen" => Ok(ArmorType::Thirteen),
"mothergarb" => Ok(ArmorType::MotherGarb),
"mothergarb" => Ok(ArmorType::MotherGarb),
"dressplate" => Ok(ArmorType::DressPlate),
"sweetheart" => Ok(ArmorType::Sweetheart),
"ignitioncloak" => Ok(ArmorType::IgnitionCloak),
"congealcloak" => Ok(ArmorType::CongealCloak),
"tempestcloak" => Ok(ArmorType::TempestCloak),
"cursedcloak" => Ok(ArmorType::CursedCloak),
"selectcloak" => Ok(ArmorType::SelectCloak),
"spiritcuirass" => Ok(ArmorType::SpiritCuirass),
"revivalcuriass" => Ok(ArmorType::RevivalCuriass),
"allianceuniform" => Ok(ArmorType::AllianceUniform),
"officeruniform" => Ok(ArmorType::OfficerUniform),
"commanderuniform" => Ok(ArmorType::CommanderUniform),
"crimsoncoat" => Ok(ArmorType::CrimsonCoat),
"infantrygear" => Ok(ArmorType::InfantryGear),
"lieutenantgear" => Ok(ArmorType::LieutenantGear),
"infantrymantle" => Ok(ArmorType::InfantryMantle),
"lieutenantmantle" => Ok(ArmorType::LieutenantMantle),
"unionfield" => Ok(ArmorType::UnionField),
"samuraiarmor" => Ok(ArmorType::SamuraiArmor),
"stealthsuit" => Ok(ArmorType::StealthSuit),
"????" => Ok(ArmorType::????),
            _ => Err(ItemParseError::UnknownItem(String::from(value)))
        }
    }
}

impl ArmorType {
    fn as_value(&self) -> u32 {
        match self {
            ArmorType::Frame => 0x010100,
ArmorType::Armor => 0x010101,
ArmorType::PsyArmor => 0x010102,
ArmorType::GigaFrame => 0x010103,
ArmorType::SoulFrame => 0x010104,
ArmorType::CrossArmor => 0x010105,
ArmorType::SolidFrame => 0x010106,
ArmorType::BraveArmor => 0x010107,
ArmorType::HyperFrame => 0x010108,
ArmorType::GrandArmor => 0x010109,
ArmorType::ShockFrame => 0x01010A,
ArmorType::KingsFrame => 0x01010B,
ArmorType::DragonFrame => 0x01010C,
ArmorType::AbsorbArmor => 0x01010D,
ArmorType::ProtectFrame => 0x01010E,
ArmorType::GeneralArmor => 0x01010F,
ArmorType::PerfectFrame => 0x010110,
ArmorType::ValiantFrame => 0x010111,
ArmorType::ImperialArmor => 0x010112,
ArmorType::HolinessArmor => 0x010113,
ArmorType::GuardianArmor => 0x010114,
ArmorType::DivinityArmor => 0x010115,
ArmorType::UltimateFrame => 0x010116,
ArmorType::CelestialArmor => 0x010117,
ArmorType::HunterField => 0x010118,
ArmorType::RangerField => 0x010119,
ArmorType::ForceField => 0x01011A,
ArmorType::RevivalGarment => 0x01011B,
ArmorType::SpiritGarment => 0x01011C,
ArmorType::StinkFrame => 0x01011D,
ArmorType::DPartsver101 => 0x01011E,
ArmorType::DPartsver210 => 0x01011F,
ArmorType::ParasiteWeardeRol => 0x010120,
ArmorType::ParasiteWearnelgal => 0x010121,
ArmorType::ParasiteWearvajulla => 0x010122,
ArmorType::SensePlate => 0x010123,
ArmorType::GravitonPlate => 0x010124,
ArmorType::AttributePlate => 0x010125,
ArmorType::FlowensFrame => 0x010126,
ArmorType::CustomFrameveroo => 0x010127,
ArmorType::DbsArmor => 0x010128,
ArmorType::GuardWave => 0x010129,
ArmorType::DfField => 0x01012A,
ArmorType::LuminousField => 0x01012B,
ArmorType::ChuChuFever => 0x01012C,
ArmorType::LoveHeart => 0x01012D,
ArmorType::FlameGarment => 0x01012E,
ArmorType::VirusArmorlafuteria => 0x01012F,
ArmorType::BrightnessCircle => 0x010130,
ArmorType::AuraField => 0x010131,
ArmorType::ElectroFrame => 0x010132,
ArmorType::SacredCloth => 0x010133,
ArmorType::SmokingPlate => 0x010134,
ArmorType::StarCuirass => 0x010135,
ArmorType::BlackHoundCuirass => 0x010136,
ArmorType::MorningPrayer => 0x010137,
ArmorType::BlackOdoshiDomaru => 0x010138,
ArmorType::RedOdoshiDomaru => 0x010139,
ArmorType::BlackOdoshiRedNimaidou => 0x01013A,
ArmorType::BlueOdoshiVioletNimaidou => 0x01013B,
ArmorType::DirtyLifejacket => 0x01013C,
ArmorType::KroesSweater => 0x01013D,
ArmorType::WeddingDress => 0x01013E,
ArmorType::SonicteamArmor => 0x01013F,
ArmorType::RedCoat => 0x010140,
ArmorType::Thirteen => 0x010141,
ArmorType::MotherGarb => 0x010142,
ArmorType::MotherGarb => 0x010143,
ArmorType::DressPlate => 0x010144,
ArmorType::Sweetheart => 0x010145,
ArmorType::IgnitionCloak => 0x010146,
ArmorType::CongealCloak => 0x010147,
ArmorType::TempestCloak => 0x010148,
ArmorType::CursedCloak => 0x010149,
ArmorType::SelectCloak => 0x01014A,
ArmorType::SpiritCuirass => 0x01014B,
ArmorType::RevivalCuriass => 0x01014C,
ArmorType::AllianceUniform => 0x01014D,
ArmorType::OfficerUniform => 0x01014E,
ArmorType::CommanderUniform => 0x01014F,
ArmorType::CrimsonCoat => 0x010150,
ArmorType::InfantryGear => 0x010151,
ArmorType::LieutenantGear => 0x010152,
ArmorType::InfantryMantle => 0x010153,
ArmorType::LieutenantMantle => 0x010154,
ArmorType::UnionField => 0x010155,
ArmorType::SamuraiArmor => 0x010156,
ArmorType::StealthSuit => 0x010157,
ArmorType::???? => 0x010158,
        }
    }
}

pub struct Armor {
    armor: ArmorType,
    dfp: u8,
    evp: u8,
    slots: u8,
}

pub enum ShieldType {
    
Barrier,
Shield,
CoreShield,
GigaShield,
SoulBarrier,
HardShield,
BraveBarrier,
SolidShield,
FlameBarrier,
PlasmaBarrier,
FreezeBarrier,
PsychicBarrier,
GeneralShield,
ProtectBarrier,
GloriousShield,
ImperialBarrier,
GuardianShield,
DivinityBarrier,
UltimateShield,
SpiritualShield,
CelestialShield,
InvisibleGuard,
SacredGuard,
SPartsver116,
SPartsver201,
LightRelief,
ShieldOfDelsaber,
ForceWall,
RangerWall,
HunterWall,
AttributeWall,
SecretGear,
CombatGear,
ProtoRegeneGear,
RegenerateGear,
RegeneGearAdv,
FlowensShield,
CustomBarrierveroo,
DbsShield,
RedRing,
TripolicShield,
StandstillShield,
SafetyHeart,
KasamiBracer,
GodsShieldSuzaku,
GodsShieldGenbu,
GodsShieldByakko,
GodsShieldSeiryu,
HuntersShell,
RicosGlasses,
RicosEarring,
BlueRing,
Barrier,
SecureFeet,
Barrier,
Barrier,
Barrier,
Barrier,
RestaMerge,
AntiMerge,
ShiftaMerge,
DebandMerge,
FoieMerge,
GifoieMerge,
RafoieMerge,
RedMerge,
BartaMerge,
GibartaMerge,
RabartaMerge,
BlueMerge,
ZondeMerge,
GizondeMerge,
RazondeMerge,
YellowMerge,
RecoveryBarrier,
AssistBarrier,
RedBarrier,
BlueBarrier,
YellowBarrier,
WeaponsGoldShield,
BlackGear,
WorksGuard,
RagolRing,
BlueRing,
BlueRing,
BlueRing,
BlueRing,
BlueRing,
BlueRing,
BlueRing,
BlueRing,
GreenRing,
GreenRing,
GreenRing,
GreenRing,
GreenRing,
GreenRing,
GreenRing,
GreenRing,
YellowRing,
YellowRing,
YellowRing,
YellowRing,
YellowRing,
YellowRing,
YellowRing,
YellowRing,
PurpleRing,
PurpleRing,
PurpleRing,
PurpleRing,
PurpleRing,
PurpleRing,
PurpleRing,
PurpleRing,
WhiteRing,
WhiteRing,
WhiteRing,
WhiteRing,
WhiteRing,
WhiteRing,
WhiteRing,
WhiteRing,
BlackRing,
BlackRing,
BlackRing,
BlackRing,
BlackRing,
BlackRing,
BlackRing,
BlackRing,
WeaponsSilverShield,
WeaponsCopperShield,
Gratia,
TripolicReflector,
StrikerPlus,
RegenerateGearBP,
Rupika,
YataMirror,
BunnyEars,
CatEars,
ThreeSeals,
GodsShieldkouryu,
DfShield,
FromTheDepths,
DeRolLeShield,
HoneycombReflector,
Epsiguard,
AngelRing,
UnionGuard,
UnionGuard,
UnionGuard,
UnionGuard,
StinkShield,
Unknownb,
Genpei,
Genpei,
Genpei,
Genpei,
Genpei,
Genpei,
Genpei,
Genpei,
Genpei,
Genpei,
????,

}


impl TryFrom<&str> for ShieldType {
    type Error = ItemParseError;
    fn try_from(value: &str) -> Result<ShieldType, Self::Error> {
        match value {
            "barrier" => Ok(ShieldType::Barrier),
"shield" => Ok(ShieldType::Shield),
"coreshield" => Ok(ShieldType::CoreShield),
"gigashield" => Ok(ShieldType::GigaShield),
"soulbarrier" => Ok(ShieldType::SoulBarrier),
"hardshield" => Ok(ShieldType::HardShield),
"bravebarrier" => Ok(ShieldType::BraveBarrier),
"solidshield" => Ok(ShieldType::SolidShield),
"flamebarrier" => Ok(ShieldType::FlameBarrier),
"plasmabarrier" => Ok(ShieldType::PlasmaBarrier),
"freezebarrier" => Ok(ShieldType::FreezeBarrier),
"psychicbarrier" => Ok(ShieldType::PsychicBarrier),
"generalshield" => Ok(ShieldType::GeneralShield),
"protectbarrier" => Ok(ShieldType::ProtectBarrier),
"gloriousshield" => Ok(ShieldType::GloriousShield),
"imperialbarrier" => Ok(ShieldType::ImperialBarrier),
"guardianshield" => Ok(ShieldType::GuardianShield),
"divinitybarrier" => Ok(ShieldType::DivinityBarrier),
"ultimateshield" => Ok(ShieldType::UltimateShield),
"spiritualshield" => Ok(ShieldType::SpiritualShield),
"celestialshield" => Ok(ShieldType::CelestialShield),
"invisibleguard" => Ok(ShieldType::InvisibleGuard),
"sacredguard" => Ok(ShieldType::SacredGuard),
"spartsver116" => Ok(ShieldType::SPartsver116),
"spartsver201" => Ok(ShieldType::SPartsver201),
"lightrelief" => Ok(ShieldType::LightRelief),
"shieldofdelsaber" => Ok(ShieldType::ShieldOfDelsaber),
"forcewall" => Ok(ShieldType::ForceWall),
"rangerwall" => Ok(ShieldType::RangerWall),
"hunterwall" => Ok(ShieldType::HunterWall),
"attributewall" => Ok(ShieldType::AttributeWall),
"secretgear" => Ok(ShieldType::SecretGear),
"combatgear" => Ok(ShieldType::CombatGear),
"protoregenegear" => Ok(ShieldType::ProtoRegeneGear),
"regenerategear" => Ok(ShieldType::RegenerateGear),
"regenegearadv" => Ok(ShieldType::RegeneGearAdv),
"flowensshield" => Ok(ShieldType::FlowensShield),
"custombarrierveroo" => Ok(ShieldType::CustomBarrierveroo),
"dbsshield" => Ok(ShieldType::DbsShield),
"redring" => Ok(ShieldType::RedRing),
"tripolicshield" => Ok(ShieldType::TripolicShield),
"standstillshield" => Ok(ShieldType::StandstillShield),
"safetyheart" => Ok(ShieldType::SafetyHeart),
"kasamibracer" => Ok(ShieldType::KasamiBracer),
"godsshieldsuzaku" => Ok(ShieldType::GodsShieldSuzaku),
"godsshieldgenbu" => Ok(ShieldType::GodsShieldGenbu),
"godsshieldbyakko" => Ok(ShieldType::GodsShieldByakko),
"godsshieldseiryu" => Ok(ShieldType::GodsShieldSeiryu),
"huntersshell" => Ok(ShieldType::HuntersShell),
"ricosglasses" => Ok(ShieldType::RicosGlasses),
"ricosearring" => Ok(ShieldType::RicosEarring),
"bluering" => Ok(ShieldType::BlueRing),
"barrier" => Ok(ShieldType::Barrier),
"securefeet" => Ok(ShieldType::SecureFeet),
"barrier" => Ok(ShieldType::Barrier),
"barrier" => Ok(ShieldType::Barrier),
"barrier" => Ok(ShieldType::Barrier),
"barrier" => Ok(ShieldType::Barrier),
"restamerge" => Ok(ShieldType::RestaMerge),
"antimerge" => Ok(ShieldType::AntiMerge),
"shiftamerge" => Ok(ShieldType::ShiftaMerge),
"debandmerge" => Ok(ShieldType::DebandMerge),
"foiemerge" => Ok(ShieldType::FoieMerge),
"gifoiemerge" => Ok(ShieldType::GifoieMerge),
"rafoiemerge" => Ok(ShieldType::RafoieMerge),
"redmerge" => Ok(ShieldType::RedMerge),
"bartamerge" => Ok(ShieldType::BartaMerge),
"gibartamerge" => Ok(ShieldType::GibartaMerge),
"rabartamerge" => Ok(ShieldType::RabartaMerge),
"bluemerge" => Ok(ShieldType::BlueMerge),
"zondemerge" => Ok(ShieldType::ZondeMerge),
"gizondemerge" => Ok(ShieldType::GizondeMerge),
"razondemerge" => Ok(ShieldType::RazondeMerge),
"yellowmerge" => Ok(ShieldType::YellowMerge),
"recoverybarrier" => Ok(ShieldType::RecoveryBarrier),
"assistbarrier" => Ok(ShieldType::AssistBarrier),
"redbarrier" => Ok(ShieldType::RedBarrier),
"bluebarrier" => Ok(ShieldType::BlueBarrier),
"yellowbarrier" => Ok(ShieldType::YellowBarrier),
"weaponsgoldshield" => Ok(ShieldType::WeaponsGoldShield),
"blackgear" => Ok(ShieldType::BlackGear),
"worksguard" => Ok(ShieldType::WorksGuard),
"ragolring" => Ok(ShieldType::RagolRing),
"bluering" => Ok(ShieldType::BlueRing),
"bluering" => Ok(ShieldType::BlueRing),
"bluering" => Ok(ShieldType::BlueRing),
"bluering" => Ok(ShieldType::BlueRing),
"bluering" => Ok(ShieldType::BlueRing),
"bluering" => Ok(ShieldType::BlueRing),
"bluering" => Ok(ShieldType::BlueRing),
"bluering" => Ok(ShieldType::BlueRing),
"greenring" => Ok(ShieldType::GreenRing),
"greenring" => Ok(ShieldType::GreenRing),
"greenring" => Ok(ShieldType::GreenRing),
"greenring" => Ok(ShieldType::GreenRing),
"greenring" => Ok(ShieldType::GreenRing),
"greenring" => Ok(ShieldType::GreenRing),
"greenring" => Ok(ShieldType::GreenRing),
"greenring" => Ok(ShieldType::GreenRing),
"yellowring" => Ok(ShieldType::YellowRing),
"yellowring" => Ok(ShieldType::YellowRing),
"yellowring" => Ok(ShieldType::YellowRing),
"yellowring" => Ok(ShieldType::YellowRing),
"yellowring" => Ok(ShieldType::YellowRing),
"yellowring" => Ok(ShieldType::YellowRing),
"yellowring" => Ok(ShieldType::YellowRing),
"yellowring" => Ok(ShieldType::YellowRing),
"purplering" => Ok(ShieldType::PurpleRing),
"purplering" => Ok(ShieldType::PurpleRing),
"purplering" => Ok(ShieldType::PurpleRing),
"purplering" => Ok(ShieldType::PurpleRing),
"purplering" => Ok(ShieldType::PurpleRing),
"purplering" => Ok(ShieldType::PurpleRing),
"purplering" => Ok(ShieldType::PurpleRing),
"purplering" => Ok(ShieldType::PurpleRing),
"whitering" => Ok(ShieldType::WhiteRing),
"whitering" => Ok(ShieldType::WhiteRing),
"whitering" => Ok(ShieldType::WhiteRing),
"whitering" => Ok(ShieldType::WhiteRing),
"whitering" => Ok(ShieldType::WhiteRing),
"whitering" => Ok(ShieldType::WhiteRing),
"whitering" => Ok(ShieldType::WhiteRing),
"whitering" => Ok(ShieldType::WhiteRing),
"blackring" => Ok(ShieldType::BlackRing),
"blackring" => Ok(ShieldType::BlackRing),
"blackring" => Ok(ShieldType::BlackRing),
"blackring" => Ok(ShieldType::BlackRing),
"blackring" => Ok(ShieldType::BlackRing),
"blackring" => Ok(ShieldType::BlackRing),
"blackring" => Ok(ShieldType::BlackRing),
"blackring" => Ok(ShieldType::BlackRing),
"weaponssilvershield" => Ok(ShieldType::WeaponsSilverShield),
"weaponscoppershield" => Ok(ShieldType::WeaponsCopperShield),
"gratia" => Ok(ShieldType::Gratia),
"tripolicreflector" => Ok(ShieldType::TripolicReflector),
"strikerplus" => Ok(ShieldType::StrikerPlus),
"regenerategearbp" => Ok(ShieldType::RegenerateGearBP),
"rupika" => Ok(ShieldType::Rupika),
"yatamirror" => Ok(ShieldType::YataMirror),
"bunnyears" => Ok(ShieldType::BunnyEars),
"catears" => Ok(ShieldType::CatEars),
"threeseals" => Ok(ShieldType::ThreeSeals),
"godsshieldkouryu" => Ok(ShieldType::GodsShieldkouryu),
"dfshield" => Ok(ShieldType::DfShield),
"fromthedepths" => Ok(ShieldType::FromTheDepths),
"derolleshield" => Ok(ShieldType::DeRolLeShield),
"honeycombreflector" => Ok(ShieldType::HoneycombReflector),
"epsiguard" => Ok(ShieldType::Epsiguard),
"angelring" => Ok(ShieldType::AngelRing),
"unionguard" => Ok(ShieldType::UnionGuard),
"unionguard" => Ok(ShieldType::UnionGuard),
"unionguard" => Ok(ShieldType::UnionGuard),
"unionguard" => Ok(ShieldType::UnionGuard),
"stinkshield" => Ok(ShieldType::StinkShield),
"unknownb" => Ok(ShieldType::Unknownb),
"genpei" => Ok(ShieldType::Genpei),
"genpei" => Ok(ShieldType::Genpei),
"genpei" => Ok(ShieldType::Genpei),
"genpei" => Ok(ShieldType::Genpei),
"genpei" => Ok(ShieldType::Genpei),
"genpei" => Ok(ShieldType::Genpei),
"genpei" => Ok(ShieldType::Genpei),
"genpei" => Ok(ShieldType::Genpei),
"genpei" => Ok(ShieldType::Genpei),
"genpei" => Ok(ShieldType::Genpei),
"????" => Ok(ShieldType::????),
            _ => Err(ItemParseError::UnknownItem(String::from(value)))
        }
    }
}

impl ShieldType {
    fn as_value(&self) -> u32 {
        match self {
            ShieldType::Barrier => 0x010200,
ShieldType::Shield => 0x010201,
ShieldType::CoreShield => 0x010202,
ShieldType::GigaShield => 0x010203,
ShieldType::SoulBarrier => 0x010204,
ShieldType::HardShield => 0x010205,
ShieldType::BraveBarrier => 0x010206,
ShieldType::SolidShield => 0x010207,
ShieldType::FlameBarrier => 0x010208,
ShieldType::PlasmaBarrier => 0x010209,
ShieldType::FreezeBarrier => 0x01020A,
ShieldType::PsychicBarrier => 0x01020B,
ShieldType::GeneralShield => 0x01020C,
ShieldType::ProtectBarrier => 0x01020D,
ShieldType::GloriousShield => 0x01020E,
ShieldType::ImperialBarrier => 0x01020F,
ShieldType::GuardianShield => 0x010210,
ShieldType::DivinityBarrier => 0x010211,
ShieldType::UltimateShield => 0x010212,
ShieldType::SpiritualShield => 0x010213,
ShieldType::CelestialShield => 0x010214,
ShieldType::InvisibleGuard => 0x010215,
ShieldType::SacredGuard => 0x010216,
ShieldType::SPartsver116 => 0x010217,
ShieldType::SPartsver201 => 0x010218,
ShieldType::LightRelief => 0x010219,
ShieldType::ShieldOfDelsaber => 0x01021A,
ShieldType::ForceWall => 0x01021B,
ShieldType::RangerWall => 0x01021C,
ShieldType::HunterWall => 0x01021D,
ShieldType::AttributeWall => 0x01021E,
ShieldType::SecretGear => 0x01021F,
ShieldType::CombatGear => 0x010220,
ShieldType::ProtoRegeneGear => 0x010221,
ShieldType::RegenerateGear => 0x010222,
ShieldType::RegeneGearAdv => 0x010223,
ShieldType::FlowensShield => 0x010224,
ShieldType::CustomBarrierveroo => 0x010225,
ShieldType::DbsShield => 0x010226,
ShieldType::RedRing => 0x010227,
ShieldType::TripolicShield => 0x010228,
ShieldType::StandstillShield => 0x010229,
ShieldType::SafetyHeart => 0x01022A,
ShieldType::KasamiBracer => 0x01022B,
ShieldType::GodsShieldSuzaku => 0x01022C,
ShieldType::GodsShieldGenbu => 0x01022D,
ShieldType::GodsShieldByakko => 0x01022E,
ShieldType::GodsShieldSeiryu => 0x01022F,
ShieldType::HuntersShell => 0x010230,
ShieldType::RicosGlasses => 0x010231,
ShieldType::RicosEarring => 0x010232,
ShieldType::BlueRing => 0x010233,
ShieldType::Barrier => 0x010234,
ShieldType::SecureFeet => 0x010235,
ShieldType::Barrier => 0x010236,
ShieldType::Barrier => 0x010237,
ShieldType::Barrier => 0x010238,
ShieldType::Barrier => 0x010239,
ShieldType::RestaMerge => 0x01023A,
ShieldType::AntiMerge => 0x01023B,
ShieldType::ShiftaMerge => 0x01023C,
ShieldType::DebandMerge => 0x01023D,
ShieldType::FoieMerge => 0x01023E,
ShieldType::GifoieMerge => 0x01023F,
ShieldType::RafoieMerge => 0x010240,
ShieldType::RedMerge => 0x010241,
ShieldType::BartaMerge => 0x010242,
ShieldType::GibartaMerge => 0x010243,
ShieldType::RabartaMerge => 0x010244,
ShieldType::BlueMerge => 0x010245,
ShieldType::ZondeMerge => 0x010246,
ShieldType::GizondeMerge => 0x010247,
ShieldType::RazondeMerge => 0x010248,
ShieldType::YellowMerge => 0x010249,
ShieldType::RecoveryBarrier => 0x01024A,
ShieldType::AssistBarrier => 0x01024B,
ShieldType::RedBarrier => 0x01024C,
ShieldType::BlueBarrier => 0x01024D,
ShieldType::YellowBarrier => 0x01024E,
ShieldType::WeaponsGoldShield => 0x01024F,
ShieldType::BlackGear => 0x010250,
ShieldType::WorksGuard => 0x010251,
ShieldType::RagolRing => 0x010252,
ShieldType::BlueRing => 0x010253,
ShieldType::BlueRing => 0x010254,
ShieldType::BlueRing => 0x010255,
ShieldType::BlueRing => 0x010256,
ShieldType::BlueRing => 0x010257,
ShieldType::BlueRing => 0x010258,
ShieldType::BlueRing => 0x010259,
ShieldType::BlueRing => 0x01025A,
ShieldType::GreenRing => 0x01025B,
ShieldType::GreenRing => 0x01025C,
ShieldType::GreenRing => 0x01025D,
ShieldType::GreenRing => 0x01025E,
ShieldType::GreenRing => 0x01025F,
ShieldType::GreenRing => 0x010260,
ShieldType::GreenRing => 0x010261,
ShieldType::GreenRing => 0x010262,
ShieldType::YellowRing => 0x010263,
ShieldType::YellowRing => 0x010264,
ShieldType::YellowRing => 0x010265,
ShieldType::YellowRing => 0x010266,
ShieldType::YellowRing => 0x010267,
ShieldType::YellowRing => 0x010268,
ShieldType::YellowRing => 0x010269,
ShieldType::YellowRing => 0x01026A,
ShieldType::PurpleRing => 0x01026B,
ShieldType::PurpleRing => 0x01026C,
ShieldType::PurpleRing => 0x01026D,
ShieldType::PurpleRing => 0x01026E,
ShieldType::PurpleRing => 0x01026F,
ShieldType::PurpleRing => 0x010270,
ShieldType::PurpleRing => 0x010271,
ShieldType::PurpleRing => 0x010272,
ShieldType::WhiteRing => 0x010273,
ShieldType::WhiteRing => 0x010274,
ShieldType::WhiteRing => 0x010275,
ShieldType::WhiteRing => 0x010276,
ShieldType::WhiteRing => 0x010277,
ShieldType::WhiteRing => 0x010278,
ShieldType::WhiteRing => 0x010279,
ShieldType::WhiteRing => 0x01027A,
ShieldType::BlackRing => 0x01027B,
ShieldType::BlackRing => 0x01027C,
ShieldType::BlackRing => 0x01027D,
ShieldType::BlackRing => 0x01027E,
ShieldType::BlackRing => 0x01027F,
ShieldType::BlackRing => 0x010280,
ShieldType::BlackRing => 0x010281,
ShieldType::BlackRing => 0x010282,
ShieldType::WeaponsSilverShield => 0x010283,
ShieldType::WeaponsCopperShield => 0x010284,
ShieldType::Gratia => 0x010285,
ShieldType::TripolicReflector => 0x010286,
ShieldType::StrikerPlus => 0x010287,
ShieldType::RegenerateGearBP => 0x010288,
ShieldType::Rupika => 0x010289,
ShieldType::YataMirror => 0x01028A,
ShieldType::BunnyEars => 0x01028B,
ShieldType::CatEars => 0x01028C,
ShieldType::ThreeSeals => 0x01028D,
ShieldType::GodsShieldkouryu => 0x01028E,
ShieldType::DfShield => 0x01028F,
ShieldType::FromTheDepths => 0x010290,
ShieldType::DeRolLeShield => 0x010291,
ShieldType::HoneycombReflector => 0x010292,
ShieldType::Epsiguard => 0x010293,
ShieldType::AngelRing => 0x010294,
ShieldType::UnionGuard => 0x010295,
ShieldType::UnionGuard => 0x010296,
ShieldType::UnionGuard => 0x010297,
ShieldType::UnionGuard => 0x010298,
ShieldType::StinkShield => 0x010299,
ShieldType::Unknownb => 0x01029A,
ShieldType::Genpei => 0x01029B,
ShieldType::Genpei => 0x01029C,
ShieldType::Genpei => 0x01029D,
ShieldType::Genpei => 0x01029E,
ShieldType::Genpei => 0x01029F,
ShieldType::Genpei => 0x0102A0,
ShieldType::Genpei => 0x0102A1,
ShieldType::Genpei => 0x0102A2,
ShieldType::Genpei => 0x0102A3,
ShieldType::Genpei => 0x0102A4,
ShieldType::???? => 0x0102A5,
        }
    }
}

pub struct Shield {
    shield: ShieldType,
    dfp: u8,
    evp: u8,
}

pub enum UnitType {
    KnightPower,
GeneralPower,
OgrePower,
GodPower,
PriestMind,
GeneralMind,
AngelMind,
GodMind,
MarksmanArm,
GeneralArm,
ElfArm,
GodArm,
ThiefLegs,
GeneralLegs,
ElfLegs,
GodLegs,
DiggerHp,
GeneralHp,
DragonHp,
GodHp,
MagicianTp,
GeneralTp,
AngelTp,
GodTp,
WarriorBody,
GeneralBody,
MetalBody,
GodBody,
AngelLuck,
GodLuck,
MasterAbility,
HeroAbility,
GodAbility,
ResistFire,
ResistFlame,
ResistBurning,
ResistCold,
ResistFreeze,
ResistBlizzard,
ResistShock,
ResistThunder,
ResistStorm,
ResistLight,
ResistSaint,
ResistHoly,
ResistDark,
ResistEvil,
ResistDevil,
AllResist,
SuperResist,
PerfectResist,
HpRestorate,
HpGenerate,
HpRevival,
TpRestorate,
TpGenerate,
TpRevival,
PbAmplifier,
PbGenerate,
PbCreate,
WizardTechnique,
DevilTechnique,
GodTechnique,
GeneralBattle,
DevilBattle,
GodBattle,
CurePoison,
CureParalysis,
CureSlow,
CureConfuse,
CureFreeze,
CureShock,
YasakaniMagatama,
V101,
V501,
V502,
V801,
Limiter,
Adept,
SwordsmanLore,
ProofOfSwordsaint,
Smartlink,
DivineProtection,
HeavenlyBattle,
HeavenlyPower,
HeavenlyMind,
HeavenlyArms,
HeavenlyLegs,
HeavenlyBody,
HeavenlyLuck,
HeavenlyAbility,
CenturionAbility,
FriendRing,
HeavenlyHp,
HeavenlyTp,
HeavenlyResist,
HeavenlyTechnique,
HpRessurection,
TpRessurection,
PbIncrease,
????,
}

impl TryFrom<&str> for UnitType {
    type Error = ItemParseError;
    fn try_from(value: &str) -> Result<UnitType, Self::Error> {
        match value {
            "knightpower" => Ok(UnitType::KnightPower),
"generalpower" => Ok(UnitType::GeneralPower),
"ogrepower" => Ok(UnitType::OgrePower),
"godpower" => Ok(UnitType::GodPower),
"priestmind" => Ok(UnitType::PriestMind),
"generalmind" => Ok(UnitType::GeneralMind),
"angelmind" => Ok(UnitType::AngelMind),
"godmind" => Ok(UnitType::GodMind),
"marksmanarm" => Ok(UnitType::MarksmanArm),
"generalarm" => Ok(UnitType::GeneralArm),
"elfarm" => Ok(UnitType::ElfArm),
"godarm" => Ok(UnitType::GodArm),
"thieflegs" => Ok(UnitType::ThiefLegs),
"generallegs" => Ok(UnitType::GeneralLegs),
"elflegs" => Ok(UnitType::ElfLegs),
"godlegs" => Ok(UnitType::GodLegs),
"diggerhp" => Ok(UnitType::DiggerHp),
"generalhp" => Ok(UnitType::GeneralHp),
"dragonhp" => Ok(UnitType::DragonHp),
"godhp" => Ok(UnitType::GodHp),
"magiciantp" => Ok(UnitType::MagicianTp),
"generaltp" => Ok(UnitType::GeneralTp),
"angeltp" => Ok(UnitType::AngelTp),
"godtp" => Ok(UnitType::GodTp),
"warriorbody" => Ok(UnitType::WarriorBody),
"generalbody" => Ok(UnitType::GeneralBody),
"metalbody" => Ok(UnitType::MetalBody),
"godbody" => Ok(UnitType::GodBody),
"angelluck" => Ok(UnitType::AngelLuck),
"godluck" => Ok(UnitType::GodLuck),
"masterability" => Ok(UnitType::MasterAbility),
"heroability" => Ok(UnitType::HeroAbility),
"godability" => Ok(UnitType::GodAbility),
"resistfire" => Ok(UnitType::ResistFire),
"resistflame" => Ok(UnitType::ResistFlame),
"resistburning" => Ok(UnitType::ResistBurning),
"resistcold" => Ok(UnitType::ResistCold),
"resistfreeze" => Ok(UnitType::ResistFreeze),
"resistblizzard" => Ok(UnitType::ResistBlizzard),
"resistshock" => Ok(UnitType::ResistShock),
"resistthunder" => Ok(UnitType::ResistThunder),
"resiststorm" => Ok(UnitType::ResistStorm),
"resistlight" => Ok(UnitType::ResistLight),
"resistsaint" => Ok(UnitType::ResistSaint),
"resistholy" => Ok(UnitType::ResistHoly),
"resistdark" => Ok(UnitType::ResistDark),
"resistevil" => Ok(UnitType::ResistEvil),
"resistdevil" => Ok(UnitType::ResistDevil),
"allresist" => Ok(UnitType::AllResist),
"superresist" => Ok(UnitType::SuperResist),
"perfectresist" => Ok(UnitType::PerfectResist),
"hprestorate" => Ok(UnitType::HpRestorate),
"hpgenerate" => Ok(UnitType::HpGenerate),
"hprevival" => Ok(UnitType::HpRevival),
"tprestorate" => Ok(UnitType::TpRestorate),
"tpgenerate" => Ok(UnitType::TpGenerate),
"tprevival" => Ok(UnitType::TpRevival),
"pbamplifier" => Ok(UnitType::PbAmplifier),
"pbgenerate" => Ok(UnitType::PbGenerate),
"pbcreate" => Ok(UnitType::PbCreate),
"wizardtechnique" => Ok(UnitType::WizardTechnique),
"deviltechnique" => Ok(UnitType::DevilTechnique),
"godtechnique" => Ok(UnitType::GodTechnique),
"generalbattle" => Ok(UnitType::GeneralBattle),
"devilbattle" => Ok(UnitType::DevilBattle),
"godbattle" => Ok(UnitType::GodBattle),
"curepoison" => Ok(UnitType::CurePoison),
"cureparalysis" => Ok(UnitType::CureParalysis),
"cureslow" => Ok(UnitType::CureSlow),
"cureconfuse" => Ok(UnitType::CureConfuse),
"curefreeze" => Ok(UnitType::CureFreeze),
"cureshock" => Ok(UnitType::CureShock),
"yasakanimagatama" => Ok(UnitType::YasakaniMagatama),
"v101" => Ok(UnitType::V101),
"v501" => Ok(UnitType::V501),
"v502" => Ok(UnitType::V502),
"v801" => Ok(UnitType::V801),
"limiter" => Ok(UnitType::Limiter),
"adept" => Ok(UnitType::Adept),
"swordsmanlore" => Ok(UnitType::SwordsmanLore),
"proofofswordsaint" => Ok(UnitType::ProofOfSwordsaint),
"smartlink" => Ok(UnitType::Smartlink),
"divineprotection" => Ok(UnitType::DivineProtection),
"heavenlybattle" => Ok(UnitType::HeavenlyBattle),
"heavenlypower" => Ok(UnitType::HeavenlyPower),
"heavenlymind" => Ok(UnitType::HeavenlyMind),
"heavenlyarms" => Ok(UnitType::HeavenlyArms),
"heavenlylegs" => Ok(UnitType::HeavenlyLegs),
"heavenlybody" => Ok(UnitType::HeavenlyBody),
"heavenlyluck" => Ok(UnitType::HeavenlyLuck),
"heavenlyability" => Ok(UnitType::HeavenlyAbility),
"centurionability" => Ok(UnitType::CenturionAbility),
"friendring" => Ok(UnitType::FriendRing),
"heavenlyhp" => Ok(UnitType::HeavenlyHp),
"heavenlytp" => Ok(UnitType::HeavenlyTp),
"heavenlyresist" => Ok(UnitType::HeavenlyResist),
"heavenlytechnique" => Ok(UnitType::HeavenlyTechnique),
"hpressurection" => Ok(UnitType::HpRessurection),
"tpressurection" => Ok(UnitType::TpRessurection),
"pbincrease" => Ok(UnitType::PbIncrease),
"????" => Ok(UnitType::????),
            _ => Err(ItemParseError::UnknownItem(String::from(value)))
        }
    }
}

impl UnitType {
    fn as_bytes(&self) -> u32 {
        match self {
            UnitType::KnightPower => 0x010300,
UnitType::GeneralPower => 0x010301,
UnitType::OgrePower => 0x010302,
UnitType::GodPower => 0x010303,
UnitType::PriestMind => 0x010304,
UnitType::GeneralMind => 0x010305,
UnitType::AngelMind => 0x010306,
UnitType::GodMind => 0x010307,
UnitType::MarksmanArm => 0x010308,
UnitType::GeneralArm => 0x010309,
UnitType::ElfArm => 0x01030A,
UnitType::GodArm => 0x01030B,
UnitType::ThiefLegs => 0x01030C,
UnitType::GeneralLegs => 0x01030D,
UnitType::ElfLegs => 0x01030E,
UnitType::GodLegs => 0x01030F,
UnitType::DiggerHp => 0x010310,
UnitType::GeneralHp => 0x010311,
UnitType::DragonHp => 0x010312,
UnitType::GodHp => 0x010313,
UnitType::MagicianTp => 0x010314,
UnitType::GeneralTp => 0x010315,
UnitType::AngelTp => 0x010316,
UnitType::GodTp => 0x010317,
UnitType::WarriorBody => 0x010318,
UnitType::GeneralBody => 0x010319,
UnitType::MetalBody => 0x01031A,
UnitType::GodBody => 0x01031B,
UnitType::AngelLuck => 0x01031C,
UnitType::GodLuck => 0x01031D,
UnitType::MasterAbility => 0x01031E,
UnitType::HeroAbility => 0x01031F,
UnitType::GodAbility => 0x010320,
UnitType::ResistFire => 0x010321,
UnitType::ResistFlame => 0x010322,
UnitType::ResistBurning => 0x010323,
UnitType::ResistCold => 0x010324,
UnitType::ResistFreeze => 0x010325,
UnitType::ResistBlizzard => 0x010326,
UnitType::ResistShock => 0x010327,
UnitType::ResistThunder => 0x010328,
UnitType::ResistStorm => 0x010329,
UnitType::ResistLight => 0x01032A,
UnitType::ResistSaint => 0x01032B,
UnitType::ResistHoly => 0x01032C,
UnitType::ResistDark => 0x01032D,
UnitType::ResistEvil => 0x01032E,
UnitType::ResistDevil => 0x01032F,
UnitType::AllResist => 0x010330,
UnitType::SuperResist => 0x010331,
UnitType::PerfectResist => 0x010332,
UnitType::HpRestorate => 0x010333,
UnitType::HpGenerate => 0x010334,
UnitType::HpRevival => 0x010335,
UnitType::TpRestorate => 0x010336,
UnitType::TpGenerate => 0x010337,
UnitType::TpRevival => 0x010338,
UnitType::PbAmplifier => 0x010339,
UnitType::PbGenerate => 0x01033A,
UnitType::PbCreate => 0x01033B,
UnitType::WizardTechnique => 0x01033C,
UnitType::DevilTechnique => 0x01033D,
UnitType::GodTechnique => 0x01033E,
UnitType::GeneralBattle => 0x01033F,
UnitType::DevilBattle => 0x010340,
UnitType::GodBattle => 0x010341,
UnitType::CurePoison => 0x010342,
UnitType::CureParalysis => 0x010343,
UnitType::CureSlow => 0x010344,
UnitType::CureConfuse => 0x010345,
UnitType::CureFreeze => 0x010346,
UnitType::CureShock => 0x010347,
UnitType::YasakaniMagatama => 0x010348,
UnitType::V101 => 0x010349,
UnitType::V501 => 0x01034A,
UnitType::V502 => 0x01034B,
UnitType::V801 => 0x01034C,
UnitType::Limiter => 0x01034D,
UnitType::Adept => 0x01034E,
UnitType::SwordsmanLore => 0x01034F,
UnitType::ProofOfSwordsaint => 0x010350,
UnitType::Smartlink => 0x010351,
UnitType::DivineProtection => 0x010352,
UnitType::HeavenlyBattle => 0x010353,
UnitType::HeavenlyPower => 0x010354,
UnitType::HeavenlyMind => 0x010355,
UnitType::HeavenlyArms => 0x010356,
UnitType::HeavenlyLegs => 0x010357,
UnitType::HeavenlyBody => 0x010358,
UnitType::HeavenlyLuck => 0x010359,
UnitType::HeavenlyAbility => 0x01035A,
UnitType::CenturionAbility => 0x01035B,
UnitType::FriendRing => 0x01035C,
UnitType::HeavenlyHp => 0x01035D,
UnitType::HeavenlyTp => 0x01035E,
UnitType::HeavenlyResist => 0x01035F,
UnitType::HeavenlyTechnique => 0x010360,
UnitType::HpRessurection => 0x010361,
UnitType::TpRessurection => 0x010362,
UnitType::PbIncrease => 0x010363,
UnitType::???? => 0x010364,
        }
    }
}



pub enum UnitModifier {
    PlusPlus,
    Plus,
    Minus,
    MinusMinus,
}

pub struct Unit {
    unit: UnitType,
    umod: Option<UnitModifier>,
}

#[derive(Debug)]
pub enum ToolType {
    Monomate,
Dimate,
Trimate,
Monofluid,
Difluid,
Trifluid,
SolAtomizer,
MoonAtomizer,
StarAtomizer,
Antidote,
Antiparalysis,
Telepipe,
TrapVision,
ScapeDoll,
Monogrinder,
Digrinder,
Trigrinder,
PowerMaterial,
MindMaterial,
EvadeMaterial,
HpMaterial,
TpMaterial,
DefMaterial,
LuckMaterial,
CellofMag502,
CellofMag213,
PartsofRobochao,
HeartofOpaOpa,
HeartofPian,
HeartofChao,
SorcerersRightArm,
SbeatsArms,
ParmsArms,
DelsabersRightArm,
BringersRightArm,
DelsabersLeftArm,
SredsArms,
DragonsClaw,
HildebearsHead,
HildebluesHead,
PartsofBaranz,
BelrasRightArm,
GiGuesbody,
SinowBerillsArms,
GrassAssassinsArms,
BoomasRightArm,
GoboomasRightArm,
GigoboomasRightArm,
GalGryphonsWing,
RappysWing,
CladdingofEpsilon,
DeRolLeShell,
BerillPhoton,
Parasiticgeneflow,
MagicStoneiritista,
Blueblackstone,
Syncesta,
MagicWater,
ParasiticcellTypeD,
MagicrockheartKey,
Magicrockmoola,
StarAmplifier,
BookofHitogata,
HeartofChuChu,
PartsofEggBlaster,
HeartofAngel,
HeartofDevil,
KitofHamburger,
PanthersSpirit,
KitofMark3,
KitofMasterSystem,
KitofGenesis,
KitofSegaSaturn,
KitofDreamcast,
AmplifierofResta,
AmplifierofAnti,
AmplifierofShifta,
AmplifierofDeband,
AmplifierofFoie,
AmplifierofGifoie,
AmplifierofRafoie,
AmplifierofBarta,
AmplifierofGibarta,
AmplifierofRabarta,
AmplifierofZonde,
AmplifierofGizonde,
AmplifierofRazonde,
AmplifierofRed,
AmplifierofBlue,
AmplifierofYellow,
HeartofKapuKapu,
PhotonBooster,
Addslot,
PhotonDrop,
PhotonSphere,
PhotonCrystal,
SecretTicket,
PhotonTicket,
BookofKatana1,
BookofKatana2,
BookofKatana3,
WeaponsBronzeBadge,
WeaponsSilverBadge,
WeaponsGoldBadge,
WeaponsCrystalBadge,
WeaponsSteelBadge,
WeaponsAluminumBadge,
WeaponsLeatherBadge,
WeaponsBoneBadge,
Letterofappreciation,
ItemTicket,
ValentinesChocolate,
NewYearsCard,
ChristmasCard,
BirthdayCard,
ProofofSonicTeam,
SpecialEventTicket,
FlowerBouquet,
Cake,
Accessories,
MrnakasBusinessCard,
Present,
Chocolate,
Candy,
Cake,
WeaponsSilverBadge,
WeaponsGoldBadge,
WeaponsCrystalBadge,
WeaponsSteelBadge,
WeaponsAluminumBadge,
WeaponsLeatherBadge,
WeaponsBoneBadge,
Bouquet,
Decoction,
ChristmasPresent,
EasterEgg,
Jackolantern,
DiskVol1weddingMarch,
DiskVol2dayLight,
DiskVol3burningRangers,
DiskVol4openYourHeart,
DiskVol5liveLearn,
DiskVol6nights,
DiskVol7endingThemepianover,
DiskVol8hearttoHeart,
DiskVol9strangeBlue,
DiskVol10reunionSystem,
DiskVol11pinnacles,
DiskVol12fightinsidetheSpaceship,
HuntersReport,
HuntersReport,
HuntersReport,
HuntersReport,
HuntersReport,
Tablet,
Unknown2,
DragonScale,
HeavenStrikerCoat,
PioneerParts,
AmitiesMemo,
HeartofMorolian,
RappysBeak,
Yahoosengine,
DPhotonCore,
LibertaKit,
CellofMag0503,
CellofMag0504,
CellofMag0505,
CellofMag0506,
CellofMag0507,
TeamPoints500,
TeamPoints1000,
TeamPoints5000,
TeamPoints10000,
????,


}

impl TryFrom<&str> for ToolType {
    type Error = ItemParseError;
    fn try_from(value: &str) -> Result<ToolType, ItemParseError> {
        match value {
            "monomate" => Ok(ToolType::Monomate),
"dimate" => Ok(ToolType::Dimate),
"trimate" => Ok(ToolType::Trimate),
"monofluid" => Ok(ToolType::Monofluid),
"difluid" => Ok(ToolType::Difluid),
"trifluid" => Ok(ToolType::Trifluid),
"solatomizer" => Ok(ToolType::SolAtomizer),
"moonatomizer" => Ok(ToolType::MoonAtomizer),
"staratomizer" => Ok(ToolType::StarAtomizer),
"antidote" => Ok(ToolType::Antidote),
"antiparalysis" => Ok(ToolType::Antiparalysis),
"telepipe" => Ok(ToolType::Telepipe),
"trapvision" => Ok(ToolType::TrapVision),
"scapedoll" => Ok(ToolType::ScapeDoll),
"monogrinder" => Ok(ToolType::Monogrinder),
"digrinder" => Ok(ToolType::Digrinder),
"trigrinder" => Ok(ToolType::Trigrinder),
"powermaterial" => Ok(ToolType::PowerMaterial),
"mindmaterial" => Ok(ToolType::MindMaterial),
"evadematerial" => Ok(ToolType::EvadeMaterial),
"hpmaterial" => Ok(ToolType::HpMaterial),
"tpmaterial" => Ok(ToolType::TpMaterial),
"defmaterial" => Ok(ToolType::DefMaterial),
"luckmaterial" => Ok(ToolType::LuckMaterial),
"cellofmag502" => Ok(ToolType::CellofMag502),
"cellofmag213" => Ok(ToolType::CellofMag213),
"partsofrobochao" => Ok(ToolType::PartsofRobochao),
"heartofopaopa" => Ok(ToolType::HeartofOpaOpa),
"heartofpian" => Ok(ToolType::HeartofPian),
"heartofchao" => Ok(ToolType::HeartofChao),
"sorcerersrightarm" => Ok(ToolType::SorcerersRightArm),
"sbeatsarms" => Ok(ToolType::SbeatsArms),
"parmsarms" => Ok(ToolType::ParmsArms),
"delsabersrightarm" => Ok(ToolType::DelsabersRightArm),
"bringersrightarm" => Ok(ToolType::BringersRightArm),
"delsabersleftarm" => Ok(ToolType::DelsabersLeftArm),
"sredsarms" => Ok(ToolType::SredsArms),
"dragonsclaw" => Ok(ToolType::DragonsClaw),
"hildebearshead" => Ok(ToolType::HildebearsHead),
"hildeblueshead" => Ok(ToolType::HildebluesHead),
"partsofbaranz" => Ok(ToolType::PartsofBaranz),
"belrasrightarm" => Ok(ToolType::BelrasRightArm),
"giguesbody" => Ok(ToolType::GiGuesbody),
"sinowberillsarms" => Ok(ToolType::SinowBerillsArms),
"grassassassinsarms" => Ok(ToolType::GrassAssassinsArms),
"boomasrightarm" => Ok(ToolType::BoomasRightArm),
"goboomasrightarm" => Ok(ToolType::GoboomasRightArm),
"gigoboomasrightarm" => Ok(ToolType::GigoboomasRightArm),
"galgryphonswing" => Ok(ToolType::GalGryphonsWing),
"rappyswing" => Ok(ToolType::RappysWing),
"claddingofepsilon" => Ok(ToolType::CladdingofEpsilon),
"derolleshell" => Ok(ToolType::DeRolLeShell),
"berillphoton" => Ok(ToolType::BerillPhoton),
"parasiticgeneflow" => Ok(ToolType::Parasiticgeneflow),
"magicstoneiritista" => Ok(ToolType::MagicStoneiritista),
"blueblackstone" => Ok(ToolType::Blueblackstone),
"syncesta" => Ok(ToolType::Syncesta),
"magicwater" => Ok(ToolType::MagicWater),
"parasiticcelltyped" => Ok(ToolType::ParasiticcellTypeD),
"magicrockheartkey" => Ok(ToolType::MagicrockheartKey),
"magicrockmoola" => Ok(ToolType::Magicrockmoola),
"staramplifier" => Ok(ToolType::StarAmplifier),
"bookofhitogata" => Ok(ToolType::BookofHitogata),
"heartofchuchu" => Ok(ToolType::HeartofChuChu),
"partsofeggblaster" => Ok(ToolType::PartsofEggBlaster),
"heartofangel" => Ok(ToolType::HeartofAngel),
"heartofdevil" => Ok(ToolType::HeartofDevil),
"kitofhamburger" => Ok(ToolType::KitofHamburger),
"panthersspirit" => Ok(ToolType::PanthersSpirit),
"kitofmark3" => Ok(ToolType::KitofMark3),
"kitofmastersystem" => Ok(ToolType::KitofMasterSystem),
"kitofgenesis" => Ok(ToolType::KitofGenesis),
"kitofsegasaturn" => Ok(ToolType::KitofSegaSaturn),
"kitofdreamcast" => Ok(ToolType::KitofDreamcast),
"amplifierofresta" => Ok(ToolType::AmplifierofResta),
"amplifierofanti" => Ok(ToolType::AmplifierofAnti),
"amplifierofshifta" => Ok(ToolType::AmplifierofShifta),
"amplifierofdeband" => Ok(ToolType::AmplifierofDeband),
"amplifieroffoie" => Ok(ToolType::AmplifierofFoie),
"amplifierofgifoie" => Ok(ToolType::AmplifierofGifoie),
"amplifierofrafoie" => Ok(ToolType::AmplifierofRafoie),
"amplifierofbarta" => Ok(ToolType::AmplifierofBarta),
"amplifierofgibarta" => Ok(ToolType::AmplifierofGibarta),
"amplifierofrabarta" => Ok(ToolType::AmplifierofRabarta),
"amplifierofzonde" => Ok(ToolType::AmplifierofZonde),
"amplifierofgizonde" => Ok(ToolType::AmplifierofGizonde),
"amplifierofrazonde" => Ok(ToolType::AmplifierofRazonde),
"amplifierofred" => Ok(ToolType::AmplifierofRed),
"amplifierofblue" => Ok(ToolType::AmplifierofBlue),
"amplifierofyellow" => Ok(ToolType::AmplifierofYellow),
"heartofkapukapu" => Ok(ToolType::HeartofKapuKapu),
"photonbooster" => Ok(ToolType::PhotonBooster),
"addslot" => Ok(ToolType::Addslot),
"photondrop" => Ok(ToolType::PhotonDrop),
"photonsphere" => Ok(ToolType::PhotonSphere),
"photoncrystal" => Ok(ToolType::PhotonCrystal),
"secretticket" => Ok(ToolType::SecretTicket),
"photonticket" => Ok(ToolType::PhotonTicket),
"bookofkatana1" => Ok(ToolType::BookofKatana1),
"bookofkatana2" => Ok(ToolType::BookofKatana2),
"bookofkatana3" => Ok(ToolType::BookofKatana3),
"weaponsbronzebadge" => Ok(ToolType::WeaponsBronzeBadge),
"weaponssilverbadge" => Ok(ToolType::WeaponsSilverBadge),
"weaponsgoldbadge" => Ok(ToolType::WeaponsGoldBadge),
"weaponscrystalbadge" => Ok(ToolType::WeaponsCrystalBadge),
"weaponssteelbadge" => Ok(ToolType::WeaponsSteelBadge),
"weaponsaluminumbadge" => Ok(ToolType::WeaponsAluminumBadge),
"weaponsleatherbadge" => Ok(ToolType::WeaponsLeatherBadge),
"weaponsbonebadge" => Ok(ToolType::WeaponsBoneBadge),
"letterofappreciation" => Ok(ToolType::Letterofappreciation),
"itemticket" => Ok(ToolType::ItemTicket),
"valentineschocolate" => Ok(ToolType::ValentinesChocolate),
"newyearscard" => Ok(ToolType::NewYearsCard),
"christmascard" => Ok(ToolType::ChristmasCard),
"birthdaycard" => Ok(ToolType::BirthdayCard),
"proofofsonicteam" => Ok(ToolType::ProofofSonicTeam),
"specialeventticket" => Ok(ToolType::SpecialEventTicket),
"flowerbouquet" => Ok(ToolType::FlowerBouquet),
"cake" => Ok(ToolType::Cake),
"accessories" => Ok(ToolType::Accessories),
"mrnakasbusinesscard" => Ok(ToolType::MrnakasBusinessCard),
"present" => Ok(ToolType::Present),
"chocolate" => Ok(ToolType::Chocolate),
"candy" => Ok(ToolType::Candy),
"cake" => Ok(ToolType::Cake),
"weaponssilverbadge" => Ok(ToolType::WeaponsSilverBadge),
"weaponsgoldbadge" => Ok(ToolType::WeaponsGoldBadge),
"weaponscrystalbadge" => Ok(ToolType::WeaponsCrystalBadge),
"weaponssteelbadge" => Ok(ToolType::WeaponsSteelBadge),
"weaponsaluminumbadge" => Ok(ToolType::WeaponsAluminumBadge),
"weaponsleatherbadge" => Ok(ToolType::WeaponsLeatherBadge),
"weaponsbonebadge" => Ok(ToolType::WeaponsBoneBadge),
"bouquet" => Ok(ToolType::Bouquet),
"decoction" => Ok(ToolType::Decoction),
"christmaspresent" => Ok(ToolType::ChristmasPresent),
"easteregg" => Ok(ToolType::EasterEgg),
"jackolantern" => Ok(ToolType::Jackolantern),
"diskvol1weddingmarch" => Ok(ToolType::DiskVol1weddingMarch),
"diskvol2daylight" => Ok(ToolType::DiskVol2dayLight),
"diskvol3burningrangers" => Ok(ToolType::DiskVol3burningRangers),
"diskvol4openyourheart" => Ok(ToolType::DiskVol4openYourHeart),
"diskvol5livelearn" => Ok(ToolType::DiskVol5liveLearn),
"diskvol6nights" => Ok(ToolType::DiskVol6nights),
"diskvol7endingthemepianover" => Ok(ToolType::DiskVol7endingThemepianover),
"diskvol8hearttoheart" => Ok(ToolType::DiskVol8hearttoHeart),
"diskvol9strangeblue" => Ok(ToolType::DiskVol9strangeBlue),
"diskvol10reunionsystem" => Ok(ToolType::DiskVol10reunionSystem),
"diskvol11pinnacles" => Ok(ToolType::DiskVol11pinnacles),
"diskvol12fightinsidethespaceship" => Ok(ToolType::DiskVol12fightinsidetheSpaceship),
"huntersreport" => Ok(ToolType::HuntersReport),
"huntersreport" => Ok(ToolType::HuntersReport),
"huntersreport" => Ok(ToolType::HuntersReport),
"huntersreport" => Ok(ToolType::HuntersReport),
"huntersreport" => Ok(ToolType::HuntersReport),
"tablet" => Ok(ToolType::Tablet),
"unknown2" => Ok(ToolType::Unknown2),
"dragonscale" => Ok(ToolType::DragonScale),
"heavenstrikercoat" => Ok(ToolType::HeavenStrikerCoat),
"pioneerparts" => Ok(ToolType::PioneerParts),
"amitiesmemo" => Ok(ToolType::AmitiesMemo),
"heartofmorolian" => Ok(ToolType::HeartofMorolian),
"rappysbeak" => Ok(ToolType::RappysBeak),
"yahoosengine" => Ok(ToolType::Yahoosengine),
"dphotoncore" => Ok(ToolType::DPhotonCore),
"libertakit" => Ok(ToolType::LibertaKit),
"cellofmag0503" => Ok(ToolType::CellofMag0503),
"cellofmag0504" => Ok(ToolType::CellofMag0504),
"cellofmag0505" => Ok(ToolType::CellofMag0505),
"cellofmag0506" => Ok(ToolType::CellofMag0506),
"cellofmag0507" => Ok(ToolType::CellofMag0507),
"teampoints500" => Ok(ToolType::TeamPoints500),
"teampoints1000" => Ok(ToolType::TeamPoints1000),
"teampoints5000" => Ok(ToolType::TeamPoints5000),
"teampoints10000" => Ok(ToolType::TeamPoints10000),
"????" => Ok(ToolType::????),
            _ => Err(ItemParseError::UnknownItem(String::from(value)))
        }
    }
}

impl ToolType {
    fn as_value(&self) -> u32 {
        match self {
            ToolType::Monomate => 0x030000,
ToolType::Dimate => 0x030001,
ToolType::Trimate => 0x030002,
ToolType::Monofluid => 0x030100,
ToolType::Difluid => 0x030101,
ToolType::Trifluid => 0x030102,
ToolType::SolAtomizer => 0x030300,
ToolType::MoonAtomizer => 0x030400,
ToolType::StarAtomizer => 0x030500,
ToolType::Antidote => 0x030600,
ToolType::Antiparalysis => 0x030601,
ToolType::Telepipe => 0x030700,
ToolType::TrapVision => 0x030800,
ToolType::ScapeDoll => 0x030900,
ToolType::Monogrinder => 0x030A00,
ToolType::Digrinder => 0x030A01,
ToolType::Trigrinder => 0x030A02,
ToolType::PowerMaterial => 0x030B00,
ToolType::MindMaterial => 0x030B01,
ToolType::EvadeMaterial => 0x030B02,
ToolType::HpMaterial => 0x030B03,
ToolType::TpMaterial => 0x030B04,
ToolType::DefMaterial => 0x030B05,
ToolType::LuckMaterial => 0x030B06,
ToolType::CellofMag502 => 0x030C00,
ToolType::CellofMag213 => 0x030C01,
ToolType::PartsofRobochao => 0x030C02,
ToolType::HeartofOpaOpa => 0x030C03,
ToolType::HeartofPian => 0x030C04,
ToolType::HeartofChao => 0x030C05,
ToolType::SorcerersRightArm => 0x030D00,
ToolType::SbeatsArms => 0x030D01,
ToolType::ParmsArms => 0x030D02,
ToolType::DelsabersRightArm => 0x030D03,
ToolType::BringersRightArm => 0x030D04,
ToolType::DelsabersLeftArm => 0x030D05,
ToolType::SredsArms => 0x030D06,
ToolType::DragonsClaw => 0x030D07,
ToolType::HildebearsHead => 0x030D08,
ToolType::HildebluesHead => 0x030D09,
ToolType::PartsofBaranz => 0x030D0A,
ToolType::BelrasRightArm => 0x030D0B,
ToolType::GiGuesbody => 0x030D0C,
ToolType::SinowBerillsArms => 0x030D0D,
ToolType::GrassAssassinsArms => 0x030D0E,
ToolType::BoomasRightArm => 0x030D0F,
ToolType::GoboomasRightArm => 0x030D10,
ToolType::GigoboomasRightArm => 0x030D11,
ToolType::GalGryphonsWing => 0x030D12,
ToolType::RappysWing => 0x030D13,
ToolType::CladdingofEpsilon => 0x030D14,
ToolType::DeRolLeShell => 0x030D15,
ToolType::BerillPhoton => 0x030E00,
ToolType::Parasiticgeneflow => 0x030E01,
ToolType::MagicStoneiritista => 0x030E02,
ToolType::Blueblackstone => 0x030E03,
ToolType::Syncesta => 0x030E04,
ToolType::MagicWater => 0x030E05,
ToolType::ParasiticcellTypeD => 0x030E06,
ToolType::MagicrockheartKey => 0x030E07,
ToolType::Magicrockmoola => 0x030E08,
ToolType::StarAmplifier => 0x030E09,
ToolType::BookofHitogata => 0x030E0A,
ToolType::HeartofChuChu => 0x030E0B,
ToolType::PartsofEggBlaster => 0x030E0C,
ToolType::HeartofAngel => 0x030E0D,
ToolType::HeartofDevil => 0x030E0E,
ToolType::KitofHamburger => 0x030E0F,
ToolType::PanthersSpirit => 0x030E10,
ToolType::KitofMark3 => 0x030E11,
ToolType::KitofMasterSystem => 0x030E12,
ToolType::KitofGenesis => 0x030E13,
ToolType::KitofSegaSaturn => 0x030E14,
ToolType::KitofDreamcast => 0x030E15,
ToolType::AmplifierofResta => 0x030E16,
ToolType::AmplifierofAnti => 0x030E17,
ToolType::AmplifierofShifta => 0x030E18,
ToolType::AmplifierofDeband => 0x030E19,
ToolType::AmplifierofFoie => 0x030E1A,
ToolType::AmplifierofGifoie => 0x030E1B,
ToolType::AmplifierofRafoie => 0x030E1C,
ToolType::AmplifierofBarta => 0x030E1D,
ToolType::AmplifierofGibarta => 0x030E1E,
ToolType::AmplifierofRabarta => 0x030E1F,
ToolType::AmplifierofZonde => 0x030E20,
ToolType::AmplifierofGizonde => 0x030E21,
ToolType::AmplifierofRazonde => 0x030E22,
ToolType::AmplifierofRed => 0x030E23,
ToolType::AmplifierofBlue => 0x030E24,
ToolType::AmplifierofYellow => 0x030E25,
ToolType::HeartofKapuKapu => 0x030E26,
ToolType::PhotonBooster => 0x030E27,
ToolType::Addslot => 0x030F00,
ToolType::PhotonDrop => 0x031000,
ToolType::PhotonSphere => 0x031001,
ToolType::PhotonCrystal => 0x031002,
ToolType::SecretTicket => 0x031003,
ToolType::PhotonTicket => 0x031004,
ToolType::BookofKatana1 => 0x031100,
ToolType::BookofKatana2 => 0x031101,
ToolType::BookofKatana3 => 0x031102,
ToolType::WeaponsBronzeBadge => 0x031200,
ToolType::WeaponsSilverBadge => 0x031201,
ToolType::WeaponsGoldBadge => 0x031202,
ToolType::WeaponsCrystalBadge => 0x031203,
ToolType::WeaponsSteelBadge => 0x031204,
ToolType::WeaponsAluminumBadge => 0x031205,
ToolType::WeaponsLeatherBadge => 0x031206,
ToolType::WeaponsBoneBadge => 0x031207,
ToolType::Letterofappreciation => 0x031208,
ToolType::ItemTicket => 0x031209,
ToolType::ValentinesChocolate => 0x03120A,
ToolType::NewYearsCard => 0x03120B,
ToolType::ChristmasCard => 0x03120C,
ToolType::BirthdayCard => 0x03120D,
ToolType::ProofofSonicTeam => 0x03120E,
ToolType::SpecialEventTicket => 0x03120F,
ToolType::FlowerBouquet => 0x031210,
ToolType::Cake => 0x031211,
ToolType::Accessories => 0x031212,
ToolType::MrnakasBusinessCard => 0x031213,
ToolType::Present => 0x031300,
ToolType::Chocolate => 0x031400,
ToolType::Candy => 0x031401,
ToolType::Cake => 0x031402,
ToolType::WeaponsSilverBadge => 0x031403,
ToolType::WeaponsGoldBadge => 0x031404,
ToolType::WeaponsCrystalBadge => 0x031405,
ToolType::WeaponsSteelBadge => 0x031406,
ToolType::WeaponsAluminumBadge => 0x031407,
ToolType::WeaponsLeatherBadge => 0x031408,
ToolType::WeaponsBoneBadge => 0x031409,
ToolType::Bouquet => 0x03140A,
ToolType::Decoction => 0x03140B,
ToolType::ChristmasPresent => 0x031500,
ToolType::EasterEgg => 0x031501,
ToolType::Jackolantern => 0x031502,
ToolType::DiskVol1weddingMarch => 0x031600,
ToolType::DiskVol2dayLight => 0x031601,
ToolType::DiskVol3burningRangers => 0x031602,
ToolType::DiskVol4openYourHeart => 0x031603,
ToolType::DiskVol5liveLearn => 0x031604,
ToolType::DiskVol6nights => 0x031605,
ToolType::DiskVol7endingThemepianover => 0x031606,
ToolType::DiskVol8hearttoHeart => 0x031607,
ToolType::DiskVol9strangeBlue => 0x031608,
ToolType::DiskVol10reunionSystem => 0x031609,
ToolType::DiskVol11pinnacles => 0x03160A,
ToolType::DiskVol12fightinsidetheSpaceship => 0x03160B,
ToolType::HuntersReport => 0x031700,
ToolType::HuntersReport => 0x031701,
ToolType::HuntersReport => 0x031702,
ToolType::HuntersReport => 0x031703,
ToolType::HuntersReport => 0x031704,
ToolType::Tablet => 0x031800,
ToolType::Unknown2 => 0x031801,
ToolType::DragonScale => 0x031802,
ToolType::HeavenStrikerCoat => 0x031803,
ToolType::PioneerParts => 0x031804,
ToolType::AmitiesMemo => 0x031805,
ToolType::HeartofMorolian => 0x031806,
ToolType::RappysBeak => 0x031807,
ToolType::Yahoosengine => 0x031808,
ToolType::DPhotonCore => 0x031809,
ToolType::LibertaKit => 0x03180A,
ToolType::CellofMag0503 => 0x03180B,
ToolType::CellofMag0504 => 0x03180C,
ToolType::CellofMag0505 => 0x03180D,
ToolType::CellofMag0506 => 0x03180E,
ToolType::CellofMag0507 => 0x03180F,
ToolType::TeamPoints500 => 0x031900,
ToolType::TeamPoints1000 => 0x031901,
ToolType::TeamPoints5000 => 0x031902,
ToolType::TeamPoints10000 => 0x031903,
ToolType::???? => 0x031A00,
        }
    }
}

#[derive(Debug)]
pub struct Tool {
    pub tool: ToolType,
    pub stack: u8,
}

impl ItemData for Tool {
    fn row1(&self) -> u32 {
        (self.tool.as_value() << 8)
    }

    fn row2(&self) -> u32 {
        (self.stack as u32) << 16
    }

    fn row3(&self) -> u32 {
        0
    }

    fn row4(&self) -> u32 {
        0
    }
}

#[derive(Debug)]
pub enum TechType {
    Foie,
    Gifoie,
    Rafoie,
    Barta,
    Gibarta,
    Rabarta,
    Zonde,
    Gizonde,
    Razonde,
    Grants,
    Deband,
    Jellen,
    Zalure,
    Shifta,
    Ryuker,
    Resta,
    Anti,
    Reverser,
    Megid,
}

impl TryFrom<&str> for TechType {
    type Error = ItemParseError;
    fn try_from(tech: &str) -> Result<TechType, ItemParseError> {
        match tech {
            "foie" => Ok(TechType::Foie),
            "gifoie" => Ok(TechType::Gifoie),
            "rafoie" => Ok(TechType::Rafoie),
            "barta" => Ok(TechType::Barta),
            "gibarta" => Ok(TechType::Gibarta),
            "rabarta" => Ok(TechType::Rabarta),
            "zonde" => Ok(TechType::Zonde),
            "gizonde" => Ok(TechType::Gizonde),
            "razonde" => Ok(TechType::Razonde),
            "grants" => Ok(TechType::Grants),
            "deband" => Ok(TechType::Deband),
            "jellen" => Ok(TechType::Jellen),
            "zalure" => Ok(TechType::Zalure),
            "shifta" => Ok(TechType::Shifta),
            "ryuker" => Ok(TechType::Ryuker),
            "resta" => Ok(TechType::Resta),
            "anti" => Ok(TechType::Anti),
            "reverser" => Ok(TechType::Reverser),
            "megid" => Ok(TechType::Megid),
            _ => Err(ItemParseError::UnknownTech(String::from(tech)))
        }
    }
}

impl TechType {
    fn as_value(&self) -> u8 {
        match self {
            TechType::Foie => 0x00,
            TechType::Gifoie => 0x01,
            TechType::Rafoie => 0x02,
            TechType::Barta => 0x03,
            TechType::Gibarta => 0x04,
            TechType::Rabarta => 0x05,
            TechType::Zonde => 0x06,
            TechType::Gizonde => 0x07,
            TechType::Razonde => 0x08,
            TechType::Grants => 0x09,
            TechType::Deband => 0x0A,
            TechType::Jellen => 0x0B,
            TechType::Zalure => 0x0C,
            TechType::Shifta => 0x0D,
            TechType::Ryuker => 0x0E,
            TechType::Resta => 0x0F,
            TechType::Anti => 0x10,
            TechType::Reverser => 0x11,
            TechType::Megid => 0x12,
        }
    }
}

#[derive(Debug)]
pub struct Tech {
    pub tech: TechType,
    pub level: u8
}

impl ItemData for Tech {
    fn row1(&self) -> u32 {
        0x03020000 | ((self.level as u32) << 8)
    }

    fn row2(&self) -> u32 {
        (self.tech.as_value() as u32) << 24
    }

    fn row3(&self) -> u32 {
        0
    }

    fn row4(&self) -> u32 {
        0
    }
}

#[derive(Debug)]
pub enum MagType {
    Mag,
Varuna,
Mitra,
Surya,
Vayu,
Varaha,
Kama,
Ushasu,
Apsaras,
Kumara,
Kaitabha,
Tapas,
Bhirava,
Kalki,
Rudra,
Marutah,
Yaksa,
Sita,
Garuda,
Nandin,
Ashvinau,
Ribhava,
Soma,
Ila,
Durga,
Vritra,
Namuci,
Sumba,
Naga,
Pitri,
Kabanda,
Ravana,
Marica,
Soniti,
Preta,
Andhaka,
Bana,
Naraka,
Madhu,
Churel,
Robochao,
Opaopa,
Pian,
Chao,
ChuChu,
KapuKapu,
AngelsWing,
DevilsWing,
Elenor,
Mark3,
MasterSystem,
Genesis,
SegaSaturn,
Dreamcast,
Hamburger,
PanzersTail,
DevilsTail,
Deva,
Rati,
Savitri,
Rukmin,
Pushan,
Diwari,
Sato,
Bhima,
Nidra,
Geungsi,
Unusedmag,
Tellusis,
StrikerUnit,
Pioneer,
Puyo,
Moro,
Rappy,
Yahoo,
GaelGiel,
Agastya,
CellofMag0503,
CellofMag0504,
CellofMag0505,
CellofMag0506,
CellofMag0507,
????,
}

impl TryFrom<&str> for MagType {
    type Error = ItemParseError;
    fn try_from(value: &str) -> Result<MagType, ItemParseError> {
        match value {
            "mag" => Ok(MagType::Mag),
"varuna" => Ok(MagType::Varuna),
"mitra" => Ok(MagType::Mitra),
"surya" => Ok(MagType::Surya),
"vayu" => Ok(MagType::Vayu),
"varaha" => Ok(MagType::Varaha),
"kama" => Ok(MagType::Kama),
"ushasu" => Ok(MagType::Ushasu),
"apsaras" => Ok(MagType::Apsaras),
"kumara" => Ok(MagType::Kumara),
"kaitabha" => Ok(MagType::Kaitabha),
"tapas" => Ok(MagType::Tapas),
"bhirava" => Ok(MagType::Bhirava),
"kalki" => Ok(MagType::Kalki),
"rudra" => Ok(MagType::Rudra),
"marutah" => Ok(MagType::Marutah),
"yaksa" => Ok(MagType::Yaksa),
"sita" => Ok(MagType::Sita),
"garuda" => Ok(MagType::Garuda),
"nandin" => Ok(MagType::Nandin),
"ashvinau" => Ok(MagType::Ashvinau),
"ribhava" => Ok(MagType::Ribhava),
"soma" => Ok(MagType::Soma),
"ila" => Ok(MagType::Ila),
"durga" => Ok(MagType::Durga),
"vritra" => Ok(MagType::Vritra),
"namuci" => Ok(MagType::Namuci),
"sumba" => Ok(MagType::Sumba),
"naga" => Ok(MagType::Naga),
"pitri" => Ok(MagType::Pitri),
"kabanda" => Ok(MagType::Kabanda),
"ravana" => Ok(MagType::Ravana),
"marica" => Ok(MagType::Marica),
"soniti" => Ok(MagType::Soniti),
"preta" => Ok(MagType::Preta),
"andhaka" => Ok(MagType::Andhaka),
"bana" => Ok(MagType::Bana),
"naraka" => Ok(MagType::Naraka),
"madhu" => Ok(MagType::Madhu),
"churel" => Ok(MagType::Churel),
"robochao" => Ok(MagType::Robochao),
"opaopa" => Ok(MagType::Opaopa),
"pian" => Ok(MagType::Pian),
"chao" => Ok(MagType::Chao),
"chuchu" => Ok(MagType::ChuChu),
"kapukapu" => Ok(MagType::KapuKapu),
"angelswing" => Ok(MagType::AngelsWing),
"devilswing" => Ok(MagType::DevilsWing),
"elenor" => Ok(MagType::Elenor),
"mark3" => Ok(MagType::Mark3),
"mastersystem" => Ok(MagType::MasterSystem),
"genesis" => Ok(MagType::Genesis),
"segasaturn" => Ok(MagType::SegaSaturn),
"dreamcast" => Ok(MagType::Dreamcast),
"hamburger" => Ok(MagType::Hamburger),
"panzerstail" => Ok(MagType::PanzersTail),
"devilstail" => Ok(MagType::DevilsTail),
"deva" => Ok(MagType::Deva),
"rati" => Ok(MagType::Rati),
"savitri" => Ok(MagType::Savitri),
"rukmin" => Ok(MagType::Rukmin),
"pushan" => Ok(MagType::Pushan),
"diwari" => Ok(MagType::Diwari),
"sato" => Ok(MagType::Sato),
"bhima" => Ok(MagType::Bhima),
"nidra" => Ok(MagType::Nidra),
"geungsi" => Ok(MagType::Geungsi),
"unusedmag" => Ok(MagType::Unusedmag),
"tellusis" => Ok(MagType::Tellusis),
"strikerunit" => Ok(MagType::StrikerUnit),
"pioneer" => Ok(MagType::Pioneer),
"puyo" => Ok(MagType::Puyo),
"moro" => Ok(MagType::Moro),
"rappy" => Ok(MagType::Rappy),
"yahoo" => Ok(MagType::Yahoo),
"gaelgiel" => Ok(MagType::GaelGiel),
"agastya" => Ok(MagType::Agastya),
"cellofmag0503" => Ok(MagType::CellofMag0503),
"cellofmag0504" => Ok(MagType::CellofMag0504),
"cellofmag0505" => Ok(MagType::CellofMag0505),
"cellofmag0506" => Ok(MagType::CellofMag0506),
"cellofmag0507" => Ok(MagType::CellofMag0507),
"????" => Ok(MagType::????),
            _ => Err(ItemParseError::UnknownItem(String::from(value)))
        }
    }
}

impl MagType {
    fn as_value(&self) -> u32 {
        match self {
            MagType::Mag => 0x020000,
MagType::Varuna => 0x020100,
MagType::Mitra => 0x020200,
MagType::Surya => 0x020300,
MagType::Vayu => 0x020400,
MagType::Varaha => 0x020500,
MagType::Kama => 0x020600,
MagType::Ushasu => 0x020700,
MagType::Apsaras => 0x020800,
MagType::Kumara => 0x020900,
MagType::Kaitabha => 0x020A00,
MagType::Tapas => 0x020B00,
MagType::Bhirava => 0x020C00,
MagType::Kalki => 0x020D00,
MagType::Rudra => 0x020E00,
MagType::Marutah => 0x020F00,
MagType::Yaksa => 0x021000,
MagType::Sita => 0x021100,
MagType::Garuda => 0x021200,
MagType::Nandin => 0x021300,
MagType::Ashvinau => 0x021400,
MagType::Ribhava => 0x021500,
MagType::Soma => 0x021600,
MagType::Ila => 0x021700,
MagType::Durga => 0x021800,
MagType::Vritra => 0x021900,
MagType::Namuci => 0x021A00,
MagType::Sumba => 0x021B00,
MagType::Naga => 0x021C00,
MagType::Pitri => 0x021D00,
MagType::Kabanda => 0x021E00,
MagType::Ravana => 0x021F00,
MagType::Marica => 0x022000,
MagType::Soniti => 0x022100,
MagType::Preta => 0x022200,
MagType::Andhaka => 0x022300,
MagType::Bana => 0x022400,
MagType::Naraka => 0x022500,
MagType::Madhu => 0x022600,
MagType::Churel => 0x022700,
MagType::Robochao => 0x022800,
MagType::Opaopa => 0x022900,
MagType::Pian => 0x022A00,
MagType::Chao => 0x022B00,
MagType::ChuChu => 0x022C00,
MagType::KapuKapu => 0x022D00,
MagType::AngelsWing => 0x022E00,
MagType::DevilsWing => 0x022F00,
MagType::Elenor => 0x023000,
MagType::Mark3 => 0x023100,
MagType::MasterSystem => 0x023200,
MagType::Genesis => 0x023300,
MagType::SegaSaturn => 0x023400,
MagType::Dreamcast => 0x023500,
MagType::Hamburger => 0x023600,
MagType::PanzersTail => 0x023700,
MagType::DevilsTail => 0x023800,
MagType::Deva => 0x023900,
MagType::Rati => 0x023A00,
MagType::Savitri => 0x023B00,
MagType::Rukmin => 0x023C00,
MagType::Pushan => 0x023D00,
MagType::Diwari => 0x023E00,
MagType::Sato => 0x023F00,
MagType::Bhima => 0x024000,
MagType::Nidra => 0x024100,
MagType::Geungsi => 0x024200,
MagType::Unusedmag => 0x024300,
MagType::Tellusis => 0x024400,
MagType::StrikerUnit => 0x024500,
MagType::Pioneer => 0x024600,
MagType::Puyo => 0x024700,
MagType::Moro => 0x024800,
MagType::Rappy => 0x024900,
MagType::Yahoo => 0x024A00,
MagType::GaelGiel => 0x024B00,
MagType::Agastya => 0x024C00,
MagType::CellofMag0503 => 0x024D00,
MagType::CellofMag0504 => 0x024E00,
MagType::CellofMag0505 => 0x024F00,
MagType::CellofMag0506 => 0x025000,
MagType::CellofMag0507 => 0x025100,
MagType::???? => 0x025200,



            
        }
    }
}

#[derive(Debug, PartialEq)]
pub enum PhotonBlast {
    Farlla,
    Estlla,
    Leilla,
    Pilla,
    Golla,
    MyllaYoulla,
}

impl TryFrom<&str> for PhotonBlast {
    type Error = ItemParseError;
    fn try_from(value: &str) -> Result<PhotonBlast, ItemParseError> {
        match value {
            "farlla" | "f" => Ok(PhotonBlast::Farlla),
            "estlla" | "e" => Ok(PhotonBlast::Estlla),
            "leilla" | "l" => Ok(PhotonBlast::Leilla),
            "pilla" | "p" => Ok(PhotonBlast::Pilla),
            "golla" | "g" => Ok(PhotonBlast::Golla),
            "myllayoulla" | "mylla" | "youlla" | "twins" | "t" => Ok(PhotonBlast::MyllaYoulla),
            _ => Err(ItemParseError::UnknownPhotonBlast(String::from(value)))
        }
    }
}

#[derive(Debug)]
pub enum MagColor {
    Null
}

impl MagColor {
    fn as_value(&self) -> u8 {
        match self {
            MagColor::Null => 0,
        }
    }
}

#[derive(Debug)]
pub struct Mag {
    pub mag: MagType,
    pub iq: u8,
    pub sync: u8,
    pub def: u16,
    pub pow: u16,
    pub dex: u16,
    pub mnd: u16,
    pub pbs: [Option<PhotonBlast>; 3],
    pub color: MagColor,
}


impl Mag {
    fn photon_blast_value(&self) -> u32 {
        let mut photon_blast_list = vec![PhotonBlast::Farlla,
                                         PhotonBlast::Estlla,
                                         PhotonBlast::Golla,
                                         PhotonBlast::Pilla,
                                         PhotonBlast::Leilla,
                                         PhotonBlast::MyllaYoulla];
        let mut photon_blast: u32 = 0;

        if let Some(ref pb_mid) = self.pbs[0] {
            match *pb_mid {
                PhotonBlast::Farlla => {},
                PhotonBlast::Estlla =>      photon_blast |= 1,
                PhotonBlast::Golla =>       photon_blast |= 2,
                PhotonBlast::Pilla =>       photon_blast |= 3,
                PhotonBlast::Leilla =>      photon_blast |= 4,
                PhotonBlast::MyllaYoulla => photon_blast |= 5,
            }

            photon_blast_list.retain(|k| k != pb_mid);
        }
        if let Some(ref pb_right) = self.pbs[1] {
            match *pb_right {
                PhotonBlast::Farlla => {}
                PhotonBlast::Estlla =>      photon_blast |= 1 << 3,
                PhotonBlast::Golla =>       photon_blast |= 2 << 3,
                PhotonBlast::Pilla =>       photon_blast |= 3 << 3,
                PhotonBlast::Leilla =>      photon_blast |= 4 << 3,
                PhotonBlast::MyllaYoulla => photon_blast |= 5 << 3,
            }

            photon_blast_list.retain(|k| k != pb_right);
        }
        if let Some(ref pb_left) = self.pbs[2] {
            if let Some(pos) = photon_blast_list.iter().position(|k| k == pb_left) {
                photon_blast |= (pos as u32) << 6;
            };
        }

        photon_blast
    }

    fn photon_blast_count(&self) -> u8 {
        let mut count = 0;
        for i in 0..3 {
            if let Some(_) = self.pbs[i] {
                count |= 1 << i
            };
        }
        count
    }
}

impl ItemData for Mag {
    fn row1(&self) -> u32 {
        self.mag.as_value() << 8 | self.photon_blast_value()
    }

    fn row2(&self) -> u32 {
        (((self.def * 100).swap_bytes() as u32) << 16) | ((self.pow * 100).swap_bytes() as u32)
    }

    fn row3(&self) -> u32 {
        (((self.dex * 100).swap_bytes() as u32) << 16) | ((self.mnd * 100).swap_bytes() as u32)
    }

    fn row4(&self) -> u32 {
        (self.color.as_value() as u32) << 24 | (self.photon_blast_count() as u32) << 16 | (self.iq as u32) << 8 | (self.sync as u32)
    }
}

pub struct Meseta {
    amount: u32,
}

#[derive(Debug)]
pub struct RawItemData {
    pub data: Vec<u8>,
}

impl RawItemData {
    fn get_row(&self, row: usize) -> u32 {
        let mut result = 0;
        for i in 0..4 {
            result |= match self.data.get(row*4 + i) {
                Some(v) => (*v as u32) << (i*8),
                None => 0,
            };
        }
        result
    }
}

impl ItemData for RawItemData {
    fn row1(&self) -> u32 {
        self.get_row(0)
    }

    fn row2(&self) -> u32 {
        self.get_row(1)
    }

    fn row3(&self) -> u32 {
        self.get_row(2)
    }

    fn row4(&self) -> u32 {
        self.get_row(3)
    }
}

mod test {
    #[test]
    fn test_mag_pb() {
        let mut mag = crate::items::Mag {
            mag: crate::items::MagType::Sato,
            iq: 0,
            sync: 0,
            def: 0,
            pow: 0,
            dex:0,
            mnd:0,
            pbs: [Some(crate::items::PhotonBlast::Leilla),
                  Some(crate::items::PhotonBlast::Pilla),
                  Some(crate::items::PhotonBlast::MyllaYoulla)],
            color: crate::items::MagColor::Null,
        };

        println!("{:X?}", mag.photon_blast_value());
    }
}
